from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from models import Base, Enterprise, Workshop, Oven, Product
from config_loader import ConfigLoader


def setup_database_from_config(config_file='cameras.yaml'):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = ConfigLoader(config_file)
    cameras = config.get_cameras()

    # –°–æ–∑–¥–∞–µ–º –ë–î
    engine = create_engine('sqlite:///bread_production.db')
    Base.metadata.create_all(engine)
    Session = sessionmaker(bind=engine)
    session = Session()

    print("üóÑÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–∞–º–µ—Ä—ã –ø–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è–º –∏ —Ü–µ—Ö–∞–º
    enterprises_data = {}

    for camera in cameras:
        ent_name = camera.enterprise_name
        workshop_name = camera.workshop_name

        if ent_name not in enterprises_data:
            enterprises_data[ent_name] = {}

        if workshop_name not in enterprises_data[ent_name]:
            enterprises_data[ent_name][workshop_name] = []

        enterprises_data[ent_name][workshop_name].append(camera)

    # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –ë–î
    for ent_name, workshops in enterprises_data.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ
        enterprise = session.query(Enterprise).filter_by(name=ent_name).first()
        if not enterprise:
            enterprise = Enterprise(
                name=ent_name,
                code=ent_name.replace(" ", "").upper()[:10]
            )
            session.add(enterprise)
            session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {ent_name}")

        for workshop_name, cameras_in_workshop in workshops.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ü–µ—Ö
            workshop = session.query(Workshop).filter_by(
                name=workshop_name,
                enterprise_id=enterprise.id
            ).first()

            if not workshop:
                workshop = Workshop(
                    name=workshop_name,
                    enterprise_id=enterprise.id
                )
                session.add(workshop)
                session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ü–µ—Ö: {workshop_name}")

            # –°–æ–∑–¥–∞–µ–º –ø–µ—á–∏
            for camera in cameras_in_workshop:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–µ—á—å
                existing_oven = session.query(Oven).filter_by(
                    number=str(camera.oven_id),
                    workshop_id=workshop.id
                ).first()

                if not existing_oven:
                    oven = Oven(
                        number=str(camera.oven_id),
                        name=camera.oven_name,
                        workshop_id=workshop.id,
                        camera_ip=camera.camera_ip,
                        camera_login=camera.login,
                        camera_password=camera.password
                    )
                    session.add(oven)
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø–µ—á—å: {camera.oven_name}")
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–º–µ—Ä—ã –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
                    existing_oven.camera_ip = camera.camera_ip
                    existing_oven.camera_login = camera.login
                    existing_oven.camera_password = camera.password
                    print(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–µ—á—å: {camera.oven_name}")

    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –º–∞—Ä–∫–µ—Ä–∞–º–∏
    default_products = [
        {'name': '–ë–µ–ª—ã–π —Ö–ª–µ–±', 'code': 'WB001', 'marker_shape': 'circle'},
        {'name': '–ß–µ—Ä–Ω—ã–π —Ö–ª–µ–±', 'code': 'BB001', 'marker_shape': 'square'},
        {'name': '–ë–∞—Ç–æ–Ω', 'code': 'BT001', 'marker_shape': 'triangle'},
        {'name': '–ë—É–ª–æ—á–∫–∏', 'code': 'BU001', 'marker_shape': 'diamond'},
        {'name': '–°–ø–µ—Ü—Ö–ª–µ–±', 'code': 'SP001', 'marker_shape': 'star'},
    ]

    for prod_data in default_products:
        existing_product = session.query(Product).filter_by(code=prod_data['code']).first()
        if not existing_product:
            product = Product(
                name=prod_data['name'],
                code=prod_data['code'],
                marker_shape=prod_data['marker_shape']
            )
            session.add(product)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç: {prod_data['name']} ({prod_data['marker_shape']})")

    session.commit()
    session.close()

    print("üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ cameras.yaml!")
