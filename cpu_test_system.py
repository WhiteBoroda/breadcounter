class CPUTestSystem:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ TPU"""

    def __init__(self):
        self.cameras = {}
        self.running = False

    def add_camera(self, oven_id, camera_ip, login, password):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã"""
        processor = CPUCameraProcessor(camera_ip, login, password, oven_id)

        if processor.connect_camera():
            self.cameras[oven_id] = processor
            print(f"‚úÖ –ö–∞–º–µ—Ä–∞ –ø–µ—á–∏ {oven_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É –ø–µ—á–∏ {oven_id}")
            return False

    def start_testing(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ CPU —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

        for processor in self.cameras.values():
            processor.start_processing()

        self.running = True

        try:
            self._monitoring_loop()
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            self.stop()

    def _monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            print("\n" + "=" * 60)
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê CPU –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            print("=" * 60)

            for oven_id, processor in self.cameras.items():
                results = processor.get_latest_results()

                if results:
                    detections = results['detections']
                    performance = results['performance']

                    bread_count = len([d for d in detections if d['class_name'] == 'bread'])
                    marker_count = len([d for d in detections if d['class_name'] in ['circle', 'square', 'triangle']])

                    print(f"\nüî• –ü–µ—á—å {oven_id}:")
                    print(f"   üìπ FPS: {processor.current_fps:2d}")
                    print(f"   üß† –û–±—Ä–∞–±–æ—Ç–∫–∞: {performance['fps']:.1f} FPS")
                    print(f"   ü•ñ –•–ª–µ–±: {bread_count} —à—Ç")
                    print(f"   üéØ –ú–∞—Ä–∫–µ—Ä—ã: {marker_count} —à—Ç")
                    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –¥–µ—Ç–µ–∫—Ü–∏–∏: {performance['avg_inference_time'] * 1000:.1f}–º—Å")
                else:
                    print(f"\nüî• –ü–µ—á—å {oven_id}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            time.sleep(10)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.running = False
        for processor in self.cameras.values():
            processor.stop_processing()
        print("‚úÖ CPU —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")