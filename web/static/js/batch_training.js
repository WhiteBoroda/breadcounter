// web/static/js/batch_training.js
// JavaScript –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
let currentBatch = null;
let templateObjects = [];
let autoTrainingActive = false;
let anomalyQueue = [];
let batchModeEnabled = false;

// –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–æ–≤ –æ–±—É—á–µ–Ω–∏—è
function toggleTrainingMode() {
    const batchPanel = document.getElementById('batchTrainingPanel');
    const regularSection = document.getElementById('regularObjectsSection');
    const toggleBtn = document.getElementById('modeToggleBtn');

    batchModeEnabled = !batchModeEnabled;

    if (batchModeEnabled) {
        // –í–∫–ª—é—á–∞–µ–º –ø–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º
        batchPanel.style.display = 'block';
        regularSection.style.display = 'none';
        toggleBtn.textContent = 'üìù –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º';
        toggleBtn.className = 'btn btn-secondary';
        showStatus('–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è', 'info');

        // –°–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∞
        const annotationForm = document.getElementById('annotationForm');
        if (annotationForm) {
            annotationForm.style.display = 'none';
        }

    } else {
        // –í–∫–ª—é—á–∞–µ–º —Ä—É—á–Ω–æ–π —Ä–µ–∂–∏–º
        batchPanel.style.display = 'none';
        regularSection.style.display = 'block';
        toggleBtn.textContent = 'üè≠ –ü–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º';
        toggleBtn.className = 'btn btn-primary';
        showStatus('–í–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è', 'info');
    }

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –æ–±—ä–µ–∫—Ç—ã —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if (typeof detectedObjects !== 'undefined' && detectedObjects.length > 0) {
        renderObjectsList();
        redrawOverlay();
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–∫—Ç–∞ –≤ –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
function handleBatchModeObjectSelection(index) {
    const obj = detectedObjects[index];

    if (!obj) {
        showStatus('–û–±—ä–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
        return;
    }

    if (currentBatch && !autoTrainingActive) {
        // –î–æ–±–∞–≤–ª—è–µ–º –∫ —ç—Ç–∞–ª–æ–Ω—É
        addToTemplate(index);
    } else if (autoTrainingActive) {
        showObjectClassification(obj);
    } else {
        showStatus('–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø–∞—Ä—Ç–∏—é', 'warning');
    }
}

// === –°–û–ó–î–ê–ù–ò–ï –ü–ê–†–¢–ò–ò ===

function createBatch() {
    const batchData = {
        product_name: document.getElementById('batchProductName').value.trim(),
        sku_code: document.getElementById('batchSku').value.trim(),
        category: document.getElementById('batchCategory').value,
        batch_size_estimate: parseInt(document.getElementById('batchSize').value),
        operator: document.getElementById('batchOperator').value.trim() || '–°–∏—Å—Ç–µ–º–∞'
    };

    if (!batchData.product_name || !batchData.sku_code) {
        showStatus('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ SKU', 'error');
        return;
    }

    fetch('/api/training/batch/create', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(batchData)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            currentBatch = data.batch_id;
            showStatus(data.message, 'success');

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª–∏
            document.getElementById('batchCreationForm').style.display = 'none';
            document.getElementById('currentBatchInfo').style.display = 'block';
            document.getElementById('templateSection').style.display = 'block';

            // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏–∏
            document.getElementById('batchId').textContent = data.batch_id;
            document.getElementById('batchProduct').textContent = batchData.product_name;
            document.getElementById('batchStatus').textContent = 'created';
            document.getElementById('batchStatus').className = 'status-badge status-created';

        } else {
            showStatus('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏: ' + data.error, 'error');
        }
    })
    .catch(error => {
        showStatus('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
    });
}

// === –†–ê–ë–û–¢–ê –° –≠–¢–ê–õ–û–ù–û–ú ===

function addToTemplate(objectIndex) {
    if (objectIndex < 0 || objectIndex >= detectedObjects.length) {
        showStatus('–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å –æ–±—ä–µ–∫—Ç–∞', 'error');
        return;
    }

    const obj = detectedObjects[objectIndex];

    if (templateObjects.find(t => t.id === obj.id)) {
        showStatus(`–û–±—ä–µ–∫—Ç ${obj.id} —É–∂–µ –≤ —ç—Ç–∞–ª–æ–Ω–µ`, 'warning');
        return;
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —ç—Ç–∞–ª–æ–Ω–∞
    const templateObj = {
        id: obj.id,
        bbox: {...obj.bbox},
        center: {...obj.center},
        confidence: obj.confidence,
        area: obj.area || (obj.bbox.width * obj.bbox.height)
    };

    templateObjects.push(templateObj);
    renderTemplateObjects();

    showStatus(`–û–±—ä–µ–∫—Ç ${obj.id} –¥–æ–±–∞–≤–ª–µ–Ω –∫ —ç—Ç–∞–ª–æ–Ω—É (${templateObjects.length})`, 'success');
}

function renderTemplateObjects() {
    const container = document.getElementById('selectedTemplateObjects');

    if (!container) return;

    if (templateObjects.length === 0) {
        container.innerHTML = '<p style="color: #666; font-size: 11px;">–≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã</p>';
        return;
    }

    container.innerHTML = templateObjects.map((obj, index) => `
        <div class="template-object-item">
            <span>${obj.id} (${obj.bbox.width}√ó${obj.bbox.height})</span>
            <button class="btn btn-sm btn-danger" onclick="removeFromTemplate(${index})" style="font-size: 9px; padding: 1px 4px;">√ó</button>
        </div>
    `).join('');
}

function removeFromTemplate(index) {
    templateObjects.splice(index, 1);
    renderTemplateObjects();

    if (typeof redrawOverlay === 'function') {
        redrawOverlay();
    }
}

function clearTemplate() {
    templateObjects = [];
    renderTemplateObjects();

    if (typeof redrawOverlay === 'function') {
        redrawOverlay();
    }

    showStatus('–≠—Ç–∞–ª–æ–Ω –æ—á–∏—â–µ–Ω', 'info');
}

function setTemplate() {
    if (templateObjects.length < 2) {
        showStatus('–í—ã–±–µ—Ä–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞', 'warning');
        return;
    }

    fetch('/api/training/batch/set_template', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({template_objects: templateObjects})
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showStatus(data.message, 'success');

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            document.getElementById('batchStatus').textContent = 'template_ready';
            document.getElementById('batchStatus').className = 'status-badge status-template_ready';

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è
            document.getElementById('autoTrainingSection').style.display = 'block';
            document.getElementById('templateSection').style.display = 'none';

        } else {
            showStatus('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç—Ç–∞–ª–æ–Ω–∞: ' + data.error, 'error');
        }
    })
    .catch(error => {
        showStatus('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
    });
}

// === –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ë–£–ß–ï–ù–ò–ï ===

function startAutoTraining() {
    fetch('/api/training/batch/start_auto', {method: 'POST'})
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            autoTrainingActive = true;
            showStatus(data.message, 'success');

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            document.getElementById('startAutoBtn').style.display = 'none';
            document.getElementById('stopAutoBtn').style.display = 'block';
            document.getElementById('trainingProgress').style.display = 'block';
            document.getElementById('batchStatus').textContent = 'auto_training';
            document.getElementById('batchStatus').className = 'status-badge status-auto_training';

        } else {
            showStatus('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏—è: ' + data.error, 'error');
        }
    })
    .catch(error => {
        showStatus('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
    });
}

function stopAutoTraining() {
    fetch('/api/training/batch/stop', {method: 'POST'})
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            autoTrainingActive = false;
            showStatus(data.message, 'info');

            // –û–±–Ω–æ–≤–ª—è–µ–º UI
            document.getElementById('startAutoBtn').style.display = 'block';
            document.getElementById('stopAutoBtn').style.display = 'none';

        } else {
            showStatus('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ' + data.error, 'error');
        }
    });
}

function processCurrentFrame() {
    if (!autoTrainingActive) {
        showStatus('–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–æ–±—É—á–µ–Ω–∏–µ', 'warning');
        return;
    }

    showStatus('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞...', 'info');

    fetch('/api/training/batch/process_frame', {method: 'POST'})
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            const results = data.results;

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            updateTrainingProgress(results);

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã —Å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
            if (data.detected_objects) {
                // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∫ –æ–±—ä–µ–∫—Ç–∞–º
                data.detected_objects.forEach((obj, index) => {
                    if (results.classifications && results.classifications[index]) {
                        obj.classification = results.classifications[index];
                    }
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–∞—Å—Å–∏–≤
                if (typeof detectedObjects !== 'undefined') {
                    detectedObjects = data.detected_objects;
                    renderObjectsList();
                    redrawOverlay();
                }
            }

            if (results.stop_required) {
                showStatus(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∞–Ω–æ–º–∞–ª–∏–∏! –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞`, 'warning');
                loadAnomalyQueue();
            } else if (results.processed > 0) {
                showStatus(`–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${results.processed} (—Ö–æ—Ä–æ—à–∏—Ö: ${results.good}, –±—Ä–∞–∫: ${results.defects})`, 'success');
            } else {
                showStatus('–ù–∞ –∫–∞–¥—Ä–µ –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏', 'info');
            }

        } else {
            showStatus('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: ' + data.error, 'error');
        }
    })
    .catch(error => {
        showStatus('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
    });
}

// === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ü–†–û–ì–†–ï–°–° ===

function updateTrainingProgress(results) {
    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞—Ä—Ç–∏–∏
    fetch('/api/training/batch/statistics')
    .then(response => response.json())
    .then(data => {
        if (data.success && data.statistics) {
            const stats = data.statistics;

            const processedElement = document.getElementById('processedCount');
            const goodElement = document.getElementById('goodCount');
            const defectElement = document.getElementById('defectCount');
            const anomalyElement = document.getElementById('anomalyCount');

            if (processedElement) processedElement.textContent = stats.processed_objects || 0;
            if (goodElement) goodElement.textContent = stats.good_objects || 0;
            if (defectElement) defectElement.textContent = stats.defect_objects || 0;
            if (anomalyElement) anomalyElement.textContent = stats.anomaly_objects || 0;
        }
    })
    .catch(error => {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É:', error);
    });
}

// === –†–ê–ë–û–¢–ê –° –ê–ù–û–ú–ê–õ–ò–Ø–ú–ò ===

function loadAnomalyQueue() {
    fetch('/api/training/batch/anomalies')
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            anomalyQueue = data.anomalies;
            renderAnomalyQueue();

            if (anomalyQueue.length > 0) {
                document.getElementById('anomalyQueueSection').style.display = 'block';
                document.getElementById('anomalyQueueCount').textContent = anomalyQueue.length;
            }
        }
    })
    .catch(error => {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–æ–º–∞–ª–∏–π:', error);
    });
}

function renderAnomalyQueue() {
    const container = document.getElementById('anomalyQueue');

    if (!container) return;

    if (anomalyQueue.length === 0) {
        container.innerHTML = '<p style="color: #666; font-size: 11px;">–ê–Ω–æ–º–∞–ª–∏–π –Ω–µ—Ç</p>';
        return;
    }

    container.innerHTML = anomalyQueue.map(anomaly => `
        <div class="anomaly-item">
            <div class="anomaly-item-header">
                <span class="anomaly-item-id">${anomaly.object.id}</span>
                <span class="anomaly-item-similarity">–°—Ö–æ–∂–µ—Å—Ç—å: ${(anomaly.classification.similarity * 100).toFixed(1)}%</span>
            </div>
            <div style="font-size: 10px; color: #666;">
                –†–∞–∑–º–µ—Ä: ${anomaly.object.bbox.width}√ó${anomaly.object.bbox.height}<br>
                –ü—Ä–∏—á–∏–Ω–∞: ${anomaly.classification.reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞'}
            </div>
            <select class="defect-category-select" id="defectCategory_${anomaly.id}" style="display: none;">
                <option value="merged">–°–ª–∏–ø—à–∏–µ—Å—è</option>
                <option value="deformed">–î–µ—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</option>
                <option value="undercooked">–ù–µ–¥–æ–ø–µ—á–µ–Ω–Ω—ã–µ</option>
                <option value="overcooked">–ü–µ—Ä–µ–ø–µ—á–µ–Ω–Ω—ã–µ</option>
                <option value="size_anomaly">–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä</option>
                <option value="foreign_object">–ü–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –æ–±—ä–µ–∫—Ç</option>
            </select>
            <div class="anomaly-actions">
                <button class="btn btn-success" onclick="resolveAnomaly(${anomaly.id}, 'add_to_good')">‚úÖ –•–æ—Ä–æ—à–∏–π</button>
                <button class="btn btn-danger" onclick="showDefectCategories(${anomaly.id})">‚ùå –ë—Ä–∞–∫</button>
                <button class="btn btn-secondary" onclick="resolveAnomaly(${anomaly.id}, 'ignore')">‚è≠Ô∏è –ò–≥–Ω–æ—Ä</button>
            </div>
        </div>
    `).join('');
}

function showDefectCategories(anomalyId) {
    const select = document.getElementById(`defectCategory_${anomalyId}`);
    if (select) {
        select.style.display = 'block';
        select.onchange = () => resolveAnomaly(anomalyId, 'mark_as_defect', select.value);
    }
}

function resolveAnomaly(anomalyId, action, defectCategory = null) {
    const resolution = {action: action};
    if (defectCategory) {
        resolution.defect_category = defectCategory;
    }

    fetch('/api/training/batch/resolve_anomaly', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
            anomaly_id: anomalyId,
            resolution: resolution
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showStatus('–ê–Ω–æ–º–∞–ª–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞', 'success');
            loadAnomalyQueue(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ—á–µ—Ä–µ–¥—å
            updateTrainingProgress(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        } else {
            showStatus('–û—à–∏–±–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∞–Ω–æ–º–∞–ª–∏–∏: ' + data.error, 'error');
        }
    })
    .catch(error => {
        showStatus('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error.message, 'error');
    });
}

// === –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–û–í –í –ü–ê–ö–ï–¢–ù–û–ú –†–ï–ñ–ò–ú–ï ===

function showObjectClassification(obj) {
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –æ–±—ä–µ–∫—Ç–∞
    let message = `–û–±—ä–µ–∫—Ç ${obj.id}:\n`;
    if (obj.classification) {
        if (obj.classification.type === 'good') {
            message += `‚úÖ –•–æ—Ä–æ—à–∏–π (—Å—Ö–æ–∂–µ—Å—Ç—å: ${(obj.classification.similarity * 100).toFixed(1)}%)`;
        } else if (obj.classification.type === 'defect') {
            message += `‚ùå –ë—Ä–∞–∫: ${obj.classification.defect_category}`;
        } else if (obj.classification.type === 'anomaly') {
            message += `‚ö†Ô∏è –ê–Ω–æ–º–∞–ª–∏—è (—Å—Ö–æ–∂–µ—Å—Ç—å: ${(obj.classification.similarity * 100).toFixed(1)}%)`;
        }
    } else {
        message += '–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞';
    }

    showStatus(message, 'info', 6000);
}

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
function renderObjectsListBatch() {
    if (!batchModeEnabled || typeof detectedObjects === 'undefined') {
        return;
    }

    const list = document.getElementById('objectsList');
    if (!list) return;

    if (detectedObjects.length === 0) {
        list.innerHTML = '<p style="color: #718096; text-align: center; padding: 1rem;">–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.<br>–ù–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã"</p>';
        return;
    }

    list.innerHTML = detectedObjects.map((obj, index) => {
        let statusIcon, statusText, statusClass;

        // –í –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
        if (templateObjects.find(t => t.id === obj.id)) {
            statusIcon = 'üéØ';
            statusText = '–≠—Ç–∞–ª–æ–Ω';
            statusClass = 'template';
        } else if (obj.classification) {
            switch (obj.classification.type) {
                case 'good':
                    statusIcon = '‚úÖ';
                    statusText = `–•–æ—Ä–æ—à–∏–π (${(obj.classification.similarity * 100).toFixed(0)}%)`;
                    statusClass = 'good';
                    break;
                case 'defect':
                    statusIcon = '‚ùå';
                    statusText = `–ë—Ä–∞–∫: ${obj.classification.defect_category}`;
                    statusClass = 'defect';
                    break;
                case 'anomaly':
                    statusIcon = '‚ö†Ô∏è';
                    statusText = `–ê–Ω–æ–º–∞–ª–∏—è (${(obj.classification.similarity * 100).toFixed(0)}%)`;
                    statusClass = 'anomaly';
                    break;
                default:
                    statusIcon = '‚ùì';
                    statusText = '–ù–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω';
                    statusClass = 'unknown';
            }
        } else {
            statusIcon = 'üìù';
            statusText = '–û–∂–∏–¥–∞–µ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏';
            statusClass = 'pending';
        }

        return `<div class="object-item ${statusClass}" onclick="selectObject(${index})">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <strong>${obj.id}</strong>
                <span style="font-size: 12px;">${statusIcon} ${statusText}</span>
            </div>
            <div style="font-size: 12px; color: #666; margin-top: 4px;">
                –ü–æ–∑–∏—Ü–∏—è: ${obj.bbox.x}, ${obj.bbox.y}<br>
                –†–∞–∑–º–µ—Ä: ${obj.bbox.width}√ó${obj.bbox.height}<br>
                –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(obj.confidence * 100).toFixed(1)}%
                ${obj.classification ? 
                    `<br><strong>–°—Ö–æ–∂–µ—Å—Ç—å:</strong> ${(obj.classification.similarity * 100).toFixed(1)}%` : ''
                }
            </div>
        </div>`;
    }).join('');
}

function drawObjectBatch(obj, isSelected) {
    if (!batchModeEnabled) return;

    const bbox = obj.bbox;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
    let strokeColor, fillColor;

    if (templateObjects.find(t => t.id === obj.id)) {
        // –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
        strokeColor = '#2b6cb0';  // –°–∏–Ω–∏–π –¥–ª—è —ç—Ç–∞–ª–æ–Ω–∞
        fillColor = 'rgba(43, 108, 176, 0.1)';
    } else if (obj.classification) {
        switch (obj.classification.type) {
            case 'good':
                strokeColor = '#22543d';  // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è —Ö–æ—Ä–æ—à–∏—Ö
                fillColor = 'rgba(34, 84, 61, 0.1)';
                break;
            case 'defect':
                strokeColor = '#e53e3e';  // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è br–∞–∫–∞
                fillColor = 'rgba(229, 62, 62, 0.1)';
                break;
            case 'anomaly':
                strokeColor = '#d69e2e';  // –û—Ä–∞–Ω–∂–µ–≤—ã–π –¥–ª—è –∞–Ω–æ–º–∞–ª–∏–π
                fillColor = 'rgba(214, 158, 46, 0.1)';
                break;
            default:
                strokeColor = '#718096';  // –°–µ—Ä—ã–π –¥–ª—è –Ω–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                fillColor = 'rgba(113, 128, 150, 0.05)';
        }
    } else {
        strokeColor = '#718096';  // –°–µ—Ä—ã–π –¥–ª—è –Ω–µ–∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        fillColor = 'rgba(113, 128, 150, 0.05)';
    }

    if (isSelected) {
        strokeColor = '#3182ce';  // –°–∏–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
        fillColor = 'rgba(49, 130, 206, 0.2)';
    }

    // –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
    if (typeof overlayCtx !== 'undefined') {
        overlayCtx.strokeStyle = strokeColor;
        overlayCtx.fillStyle = fillColor;
        overlayCtx.lineWidth = isSelected ? 3 : 2;

        overlayCtx.fillRect(bbox.x, bbox.y, bbox.width, bbox.height);
        overlayCtx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);

        // –ü–æ–¥–ø–∏—Å—å –æ–±—ä–µ–∫—Ç–∞ –≤ –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
        overlayCtx.fillStyle = strokeColor;
        overlayCtx.font = 'bold 12px Arial';

        let label = obj.id;

        // –í –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é
        if (templateObjects.find(t => t.id === obj.id)) {
            label += ' (—ç—Ç–∞–ª–æ–Ω)';
        } else if (obj.classification) {
            switch (obj.classification.type) {
                case 'good':
                    label += ` ‚úÖ ${(obj.classification.similarity * 100).toFixed(0)}%`;
                    break;
                case 'defect':
                    label += ` ‚ùå ${obj.classification.defect_category}`;
                    break;
                case 'anomaly':
                    label += ` ‚ö†Ô∏è ${(obj.classification.similarity * 100).toFixed(0)}%`;
                    break;
            }
        }

        // –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        const textMetrics = overlayCtx.measureText(label);
        const textWidth = textMetrics.width + 8;
        const textHeight = 16;

        overlayCtx.fillStyle = strokeColor;
        overlayCtx.fillRect(bbox.x, bbox.y - textHeight - 2, textWidth, textHeight);

        overlayCtx.fillStyle = 'white';
        overlayCtx.fillText(label, bbox.x + 4, bbox.y - 6);
    }
}

// === –ù–ê–°–¢–†–û–ô–ö–ò ===

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏
document.addEventListener('DOMContentLoaded', function() {
    const thresholdSlider = document.getElementById('similarityThreshold');
    if (thresholdSlider) {
        thresholdSlider.addEventListener('input', function() {
            const thresholdValue = document.getElementById('thresholdValue');
            if (thresholdValue) {
                thresholdValue.textContent = this.value;
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            fetch('/api/training/batch/settings', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({similarity_threshold: parseFloat(this.value)})
            })
            .catch(error => {
                console.warn('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
            });
        });
    }
});

// –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ –ø–∞–∫–µ—Ç–Ω–æ–º —Ä–µ–∂–∏–º–µ
if (typeof window !== 'undefined') {
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    const originalRenderObjectsList = window.renderObjectsList;
    const originalDrawObject = window.drawObject;

    // –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞
    window.renderObjectsList = function() {
        if (batchModeEnabled) {
            renderObjectsListBatch();
        } else if (originalRenderObjectsList) {
            originalRenderObjectsList();
        }
    };

    window.drawObject = function(obj, isSelected) {
        if (batchModeEnabled) {
            drawObjectBatch(obj, isSelected);
        } else if (originalDrawObject) {
            originalDrawObject(obj, isSelected);
        }
    };
}