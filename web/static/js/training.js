// web/static/js/training.js
// –û—Å–Ω–æ–≤–Ω–æ–π JavaScript –¥–ª—è –º–æ–¥—É–ª—è –æ–±—É—á–µ–Ω–∏—è

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CHUNK_SIZE = 1024 * 1024; // 1MB —á–∞–Ω–∫–∏

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let isUploading = false;
let uploadSessionId = null;
let currentVideo = null;
let currentCamera = {id: 'default', name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–º–µ—Ä–∞'};
let totalFrames = 0;
let currentFrame = 0;
let currentZoneMode = null;
let zones = {entry_zone: null, counting_zone: null, exit_zone: null, gray_zones: []};
let detectedObjects = [];
let selectedObject = null;
let isDrawing = false;
let startPoint = null;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM)
let uploadArea, fileInput, progressContainer, progressBar, progressText, progressDetails;
let fileList, videoPanel, frameSlider, frameInfo, videoCanvas, overlayCanvas;
let ctx, overlayCtx;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–∞—é—â–µ–≥–æ –º–æ–¥—É–ª—è');

    // –°–ù–ê–ß–ê–õ–ê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º DOM —ç–ª–µ–º–µ–Ω—Ç—ã
    initializeDOMElements();

    // –ü–û–¢–û–ú –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    setupEventListeners();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    setTimeout(() => {
        loadFileList();
    }, 500);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    updateZonesCount();
    updateAnnotatedCount();

    console.log('üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
});

function initializeDOMElements() {
    console.log('üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DOM —ç–ª–µ–º–µ–Ω—Ç–æ–≤...');

    // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –ò–ó DOM
    uploadArea = document.getElementById('uploadArea');
    fileInput = document.getElementById('fileInput');
    progressContainer = document.getElementById('progressContainer');
    progressBar = document.getElementById('progressBar');
    progressText = document.getElementById('progressText');
    progressDetails = document.getElementById('progressDetails');
    fileList = document.getElementById('fileList');
    videoPanel = document.getElementById('videoPanel');
    frameSlider = document.getElementById('frameSlider');
    frameInfo = document.getElementById('frameInfo');
    videoCanvas = document.getElementById('videoCanvas');
    overlayCanvas = document.getElementById('overlayCanvas');

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã canvas
    if (videoCanvas && overlayCanvas) {
        ctx = videoCanvas.getContext('2d');
        overlayCtx = overlayCanvas.getContext('2d');
        console.log('‚úÖ Canvas –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    } else {
        console.error('‚ùå Canvas —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
    const criticalElements = [
        {name: 'uploadArea', element: uploadArea},
        {name: 'fileInput', element: fileInput},
        {name: 'fileList', element: fileList},
        {name: 'frameSlider', element: frameSlider}
    ];

    criticalElements.forEach(({name, element}) => {
        if (element) {
            console.log(`‚úÖ ${name} –Ω–∞–π–¥–µ–Ω`);
        } else {
            console.error(`‚ùå ${name} –ù–ï –Ω–∞–π–¥–µ–Ω`);
        }
    });

    console.log('‚úÖ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

function setupEventListeners() {
    console.log('üéß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if (!uploadArea || !fileInput || !frameSlider) {
        console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ DOM —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        console.log('uploadArea:', !!uploadArea, 'fileInput:', !!fileInput, 'frameSlider:', !!frameSlider);
        return;
    }

    // Drag & Drop
    uploadArea.addEventListener('dragenter', handleDragEnter);
    uploadArea.addEventListener('dragover', handleDragOver);
    uploadArea.addEventListener('dragleave', handleDragLeave);
    uploadArea.addEventListener('drop', handleDrop);
    uploadArea.addEventListener('click', () => {
        console.log('üìÅ –ö–ª–∏–∫ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –∑–∞–≥—Ä—É–∑–∫–∏');
        fileInput.click();
    });

    fileInput.addEventListener('change', handleFileSelect);

    // –°–ª–∞–π–¥–µ—Ä –∫–∞–¥—Ä–æ–≤
    frameSlider.addEventListener('input', function() {
        loadFrame(parseInt(this.value));
    });

    console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
}

// === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò DRAG & DROP ===

function handleDragEnter(e) {
    e.preventDefault();
    if (!isUploading) uploadArea.style.borderColor = '#3182ce';
}

function handleDragOver(e) {
    e.preventDefault();
}

function handleDragLeave(e) {
    e.preventDefault();
    if (!uploadArea.contains(e.relatedTarget)) {
        uploadArea.style.borderColor = '#cbd5e0';
    }
}

function handleDrop(e) {
    e.preventDefault();
    uploadArea.style.borderColor = '#cbd5e0';

    if (isUploading) return;

    const files = e.dataTransfer.files;
    if (files.length > 0 && files[0].type.startsWith('video/')) {
        uploadVideoChunked(files[0]);
    } else {
        showStatus('–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª', 'error');
    }
}

function handleFileSelect(e) {
    const file = e.target.files[0];
    if (file && !isUploading) {
        uploadVideoChunked(file);
    }
}

// === –ß–ê–ù–ö–û–í–ê–Ø –ó–ê–ì–†–£–ó–ö–ê ===

async function uploadVideoChunked(file) {
    if (isUploading) return;

    isUploading = true;
    uploadArea.classList.add('uploading');
    progressContainer.style.display = 'block';

    try {
        showStatus('–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∫–∞...', 'info');

        // 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        const initResponse = await fetch('/api/training/start_upload', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({
                filename: file.name,
                file_size: file.size
            })
        });

        const initData = await initResponse.json();
        if (!initData.success) throw new Error(initData.error);

        uploadSessionId = initData.session_id;

        // 2. –ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–∞–º–∏
        const totalChunks = Math.ceil(file.size / CHUNK_SIZE);

        for (let chunkIndex = 0; chunkIndex < totalChunks; chunkIndex++) {
            const start = chunkIndex * CHUNK_SIZE;
            const end = Math.min(start + CHUNK_SIZE, file.size);
            const chunk = file.slice(start, end);

            const formData = new FormData();
            formData.append('session_id', uploadSessionId);
            formData.append('chunk_index', chunkIndex);
            formData.append('chunk', chunk);

            const chunkResponse = await fetch('/api/training/upload_chunk', {
                method: 'POST',
                body: formData
            });

            const chunkData = await chunkResponse.json();
            if (!chunkData.success) throw new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞–Ω–∫–∞');

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            const progress = chunkData.progress;
            progressBar.style.width = progress + '%';
            progressText.textContent = progress.toFixed(1) + '%';
            progressDetails.textContent =
                `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${(chunkData.uploaded_size / 1024 / 1024).toFixed(1)} MB –∏–∑ ${(file.size / 1024 / 1024).toFixed(1)} MB`;

            await new Promise(resolve => setTimeout(resolve, 10));
        }

        // 3. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        const finishResponse = await fetch('/api/training/finish_upload', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({session_id: uploadSessionId})
        });

        const finishData = await finishResponse.json();
        if (finishData.success) {
            showStatus(finishData.message, 'success');
            totalFrames = finishData.total_frames;
            frameSlider.max = totalFrames - 1;
            frameInfo.textContent = `0 / ${totalFrames}`;

            videoPanel.classList.add('active');
            loadFrame(0);
            loadFileList();
        } else {
            throw new Error(finishData.error);
        }

    } catch (error) {
        showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ' + error.message, 'error');
    } finally {
        isUploading = false;
        uploadArea.classList.remove('uploading');
        progressContainer.style.display = 'none';
        uploadSessionId = null;
    }
}

// === –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–ê–ú–ò ===

function loadFileList() {
    console.log('üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤...');

    fetch('/api/training/files')
        .then(response => {
            console.log('üì° –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.status);
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('üìã –î–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞:', data);

            if (data.files) {
                console.log(`üìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${data.files.length}`);
                renderFileList(data.files);
                updateFileStats(data.files);
            } else {
                console.warn('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—è files –≤ –æ—Ç–≤–µ—Ç–µ');
                renderFileList([]);
                updateFileStats([]);
            }
        })
        .catch(error => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error);
            showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤: ' + error.message, 'error');
            renderFileList([]);
            updateFileStats([]);
        });
}

function renderFileList(files) {
    if (!fileList) {
        console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç fileList –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    if (files.length === 0) {
        fileList.innerHTML = '<p style="color: #718096; text-align: center; padding: 1rem;">–í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.<br>–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è</p>';
        return;
    }

    fileList.innerHTML = files.map((file, index) => {
        const sizeText = file.size_gb > 1 ?
            `${file.size_gb} GB` :
            `${file.size_mb} MB`;

        const dateText = new Date(file.modified).toLocaleDateString('ru-RU');

        return `
            <div class="file-item" onclick="selectFile('${file.name}')">
                <div><strong>${file.name}</strong></div>
                <div class="file-info">
                    ${sizeText} ‚Ä¢ ${file.duration}s ‚Ä¢ ${dateText}
                </div>
                <div class="file-controls">
                    <button class="btn btn-sm btn-primary" onclick="event.stopPropagation(); selectFile('${file.name}')">
                        üìÇ –û—Ç–∫—Ä—ã—Ç—å
                    </button>
                    <button class="btn btn-sm btn-warning" onclick="event.stopPropagation(); renameFile('${file.name}')">
                        ‚úèÔ∏è 
                    </button>
                    <button class="btn btn-sm btn-danger" onclick="event.stopPropagation(); deleteFile('${file.name}')">
                        üóëÔ∏è
                    </button>
                </div>
            </div>
        `;
    }).join('');
}

function updateFileStats(files) {
    const totalFilesElement = document.getElementById('totalFiles');
    const totalSizeElement = document.getElementById('totalSize');

    if (totalFilesElement) {
        totalFilesElement.textContent = files.length;
    }

    if (totalSizeElement) {
        const totalGB = files.reduce((sum, file) => sum + (file.size_gb || 0), 0);
        totalSizeElement.textContent = totalGB.toFixed(1);
    }
}

function selectFile(filename) {
    console.log(`üìÇ –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞: ${filename}`);

    // –°–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–º–µ—Ä—É –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    fetch('/api/training/detect_camera', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({video_name: filename})
    })
    .then(response => response.json())
    .then(cameraData => {
        if (cameraData.success) {
            currentCamera = {
                id: cameraData.camera_id,
                name: cameraData.camera_name
            };
            console.log(`üé• –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–º–µ—Ä–∞: ${currentCamera.name} (${currentCamera.id})`);
        } else {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞–º–µ—Ä—É, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            currentCamera = {id: 'default', name: '–ö–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'};
        }

        // –¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
        return fetch(`/api/training/files/${filename}/select`, {method: 'POST'});
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showStatus(`${data.message} (${currentCamera.name})`, 'success');
            totalFrames = data.total_frames;
            frameSlider.max = totalFrames - 1;
            frameInfo.textContent = `0 / ${totalFrames}`;

            videoPanel.classList.add('active');
            loadFrame(0);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–º–µ—Ä–µ
            const cameraInfo = document.getElementById('cameraInfo');
            const cameraNameSpan = document.getElementById('cameraName');
            const cameraIdSpan = document.getElementById('cameraId');

            if (cameraInfo && cameraNameSpan && cameraIdSpan) {
                cameraInfo.style.display = 'block';
                cameraNameSpan.textContent = currentCamera.name;
                cameraIdSpan.textContent = currentCamera.id;
            }

            // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            document.querySelectorAll('.file-item').forEach(item => {
                item.classList.toggle('selected', item.textContent.includes(filename));
            });

            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–∞–º–µ—Ä—ã
            loadZonesForCamera(currentCamera.id, currentCamera.name);

        } else {
            showStatus('–û—à–∏–±–∫–∞: ' + data.error, 'error');
        }
    })
    .catch(error => {
        showStatus('–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: ' + error.message, 'error');
    });
}

function deleteFile(filename) {
    if (confirm(`–£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª ${filename}?`)) {
        fetch(`/api/training/files/${filename}`, {method: 'DELETE'})
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    showStatus('–§–∞–π–ª —É–¥–∞–ª–µ–Ω', 'success');
                    loadFileList();
                } else {
                    showStatus('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è', 'error');
                }
            });
    }
}

function renameFile(filename) {
    const newName = prompt('–ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞:', filename);
    if (newName && newName !== filename) {
        fetch(`/api/training/files/${filename}/rename`, {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify({new_name: newName})
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                showStatus('–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω', 'success');
                loadFileList();
            } else {
                showStatus('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è', 'error');
            }
        });
    }
}

// === –†–ê–ë–û–¢–ê –° –í–ò–î–ï–û ===

function loadFrame(frameIndex) {
    if (frameIndex < 0 || frameIndex >= totalFrames) return;

    showStatus(`–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–¥—Ä–∞ ${frameIndex}...`, 'info');

    fetch(`/api/training/frame/${frameIndex}`)
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                currentFrame = frameIndex;
                frameSlider.value = frameIndex;
                frameInfo.textContent = `${frameIndex} / ${totalFrames}`;

                const img = new Image();
                img.onload = function() {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    videoCanvas.width = img.width;
                    videoCanvas.height = img.height;
                    overlayCanvas.width = img.width;
                    overlayCanvas.height = img.height;

                    // –†–∏—Å—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
                    ctx.drawImage(img, 0, 0);
                    redrawOverlay();

                    setupCanvasEvents();
                };
                img.src = data.frame_data;

                showStatus(`–ö–∞–¥—Ä ${frameIndex} –∑–∞–≥—Ä—É–∂–µ–Ω`, 'success');
            } else {
                showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–¥—Ä–∞: ' + (data.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
            }
        })
        .catch(error => {
            showStatus('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞–¥—Ä–∞: ' + error.message, 'error');
        });
}

function previousFrame() {
    if (currentFrame > 0) loadFrame(currentFrame - 1);
}

function nextFrame() {
    if (currentFrame < totalFrames - 1) loadFrame(currentFrame + 1);
}

// === –†–ê–ë–û–¢–ê –° –ó–û–ù–ê–ú–ò ===

function loadZonesForCamera(cameraId, cameraName) {
    console.log(`üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–æ–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã: ${cameraName} (${cameraId})`);

    fetch('/api/training/zones/load', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({camera_id: cameraId})
    })
    .then(response => response.json())
    .then(data => {
        if (data.success && data.zones) {
            zones = data.zones;
            console.log('‚úÖ –ó–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –∫–∞–º–µ—Ä—ã:', zones);
            redrawOverlay();
            updateZonesCount();
            showStatus(`–ó–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è ${cameraName}`, 'success');
        } else {
            console.log(`‚ÑπÔ∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã –¥–ª—è –∫–∞–º–µ—Ä—ã ${cameraName} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            zones = {entry_zone: null, counting_zone: null, exit_zone: null, gray_zones: []};
            showStatus(`–ó–æ–Ω—ã –¥–ª—è ${cameraName} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã - —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–µ`, 'info');
        }
    })
    .catch(error => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω:', error);
        zones = {entry_zone: null, counting_zone: null, exit_zone: null, gray_zones: []};
        showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–æ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Å—Ç—ã–µ', 'warning');
    });
}

function loadZoneTemplate(templateName) {
    showStatus('–ó–∞–≥—Ä—É–∑–∫–∞ —à–∞–±–ª–æ–Ω–∞ –∑–æ–Ω...', 'info');

    fetch('/api/training/zones/template')
        .then(response => response.json())
        .then(data => {
            if (data.templates && data.templates[templateName]) {
                zones = data.templates[templateName].zones;
                redrawOverlay();
                updateZonesCount();
                showStatus(`–®–∞–±–ª–æ–Ω "${data.templates[templateName].name}" –∑–∞–≥—Ä—É–∂–µ–Ω`, 'success');
            } else {
                showStatus('–®–∞–±–ª–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            }
        })
        .catch(error => {
            showStatus('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: ' + error.message, 'error');
        });
}

function setZoneMode(mode) {
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ —Ç–æ—Ç –∂–µ
    if (currentZoneMode === mode) {
        currentZoneMode = null;
        showStatus('–†–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω', 'info');
    } else {
        currentZoneMode = mode;
        showStatus(`–†–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏: ${mode} - –Ω–∞—Ä–∏—Å—É–π—Ç–µ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –º—ã—à–∫–æ–π`, 'info');
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
    document.querySelectorAll('.zone-btn').forEach(btn => {
        btn.classList.remove('active');
    });

    if (currentZoneMode) {
        const activeBtn = event.target;
        activeBtn.classList.add('active');
    }
}

function saveZones() {
    if (Object.values(zones).every(zone => !zone || (Array.isArray(zone) && zone.length === 0))) {
        showStatus('–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ä–∏—Å—É–π—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–æ–Ω—É', 'warning');
        return;
    }

    showStatus('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–æ–Ω...', 'info');

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–æ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–∞–º–µ—Ä—ã
    fetch('/api/training/zones/save', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({
            zones: zones,
            camera_id: currentCamera.id,
            camera_name: currentCamera.name
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showStatus(`–ó–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è ${currentCamera.name}`, 'success');
            updateZonesCount();

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–æ–Ω
            if (zones.counting_zone) {
                setTimeout(() => {
                    detectObjects();
                }, 500);
            }
        } else {
            showStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–æ–Ω: ' + (data.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
        }
    })
    .catch(error => {
        showStatus('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–æ–Ω: ' + error.message, 'error');
    });
}

function clearZones() {
    if (Object.values(zones).every(zone => !zone || (Array.isArray(zone) && zone.length === 0))) {
        showStatus('–ó–æ–Ω—ã —É–∂–µ –æ—á–∏—â–µ–Ω—ã', 'info');
        return;
    }

    if (confirm('–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞–∑–º–µ—á–µ–Ω–Ω—ã–µ –∑–æ–Ω—ã?')) {
        zones = {entry_zone: null, counting_zone: null, exit_zone: null, gray_zones: []};
        redrawOverlay();
        updateZonesCount();
        showStatus('–í—Å–µ –∑–æ–Ω—ã –æ—á–∏—â–µ–Ω—ã', 'success');
    }
}

function updateZonesCount() {
    let count = 0;
    if (zones.entry_zone) count++;
    if (zones.counting_zone) count++;
    if (zones.exit_zone) count++;
    count += zones.gray_zones.length;

    const zonesCountElement = document.getElementById('zonesCount');
    if (zonesCountElement) {
        zonesCountElement.textContent = count;
    }
}

// === –î–ï–¢–ï–ö–¶–ò–Ø –û–ë–™–ï–ö–¢–û–í ===

function detectObjects() {
    showStatus('–ü–æ–∏—Å–∫ –æ–±—ä–µ–∫—Ç–æ–≤...', 'info');

    fetch('/api/training/detect')
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                detectedObjects = data.objects || [];
                renderObjectsList();
                redrawOverlay();
                showStatus(`–ù–∞–π–¥–µ–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${detectedObjects.length}`, 'success');
            } else {
                showStatus('–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: ' + (data.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
            }
        })
        .catch(error => {
            showStatus('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –¥–µ—Ç–µ–∫—Ü–∏–∏: ' + error.message, 'error');
        });
}

// === –ê–ù–ù–û–¢–ê–¶–ò–ò ===

function selectObject(index) {
    selectedObject = index;

    document.querySelectorAll('.object-item').forEach((item, i) => {
        item.classList.toggle('selected', i === index);
    });

    redrawOverlay();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è
    if (typeof batchModeEnabled !== 'undefined' && batchModeEnabled) {
        // –ü–∞–∫–µ—Ç–Ω—ã–π —Ä–µ–∂–∏–º - —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ batch_training.js
        handleBatchModeObjectSelection(index);
    } else {
        // –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        const obj = detectedObjects[index];
        if (!obj.annotated) {
            document.getElementById('annotationForm').style.display = 'block';
            document.getElementById('productGuid').value = generateGUID();

            // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
            document.getElementById('productSku').value = '';
            document.getElementById('productName').value = '';
            document.getElementById('productCategory').value = 'bread';
        } else {
            showStatus(`–û–±—ä–µ–∫—Ç —É–∂–µ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω: ${obj.annotation_data.product_name}`, 'info');
        }
    }
}

function saveAnnotation() {
    if (selectedObject === null) {
        showStatus('–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–∫—Ç –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏', 'error');
        return;
    }

    const obj = detectedObjects[selectedObject];
    const guid = document.getElementById('productGuid').value.trim();
    const sku = document.getElementById('productSku').value.trim();
    const name = document.getElementById('productName').value.trim();
    const category = document.getElementById('productCategory').value;

    if (!sku || !name) {
        showStatus('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ SKU –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞', 'error');
        return;
    }

    const annotation = {
        object_id: obj.id,
        bbox: obj.bbox,
        guid: guid,
        sku_code: sku,
        product_name: name,
        category: category,
        is_validated: true
    };

    showStatus('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏...', 'info');

    fetch('/api/training/save_annotation', {
        method: 'POST',
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify(annotation)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            showStatus(`–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª—è "${name}" —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ`, 'success');

            // –ü–æ–º–µ—á–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–∞–∫ –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
            obj.annotated = true;
            obj.annotation_data = annotation;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
            updateAnnotatedCount();

            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ —Å–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
            cancelAnnotation();

            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å —É—á–µ—Ç–æ–º –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            renderObjectsList();
            redrawOverlay();
        } else {
            showStatus('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ' + (data.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'), 'error');
        }
    })
    .catch(error => {
        showStatus('–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ' + error.message, 'error');
    });
}

function cancelAnnotation() {
    document.getElementById('annotationForm').style.display = 'none';
    selectedObject = null;
    redrawOverlay();
}

function renderObjectsList() {
    const list = document.getElementById('objectsList');

    if (detectedObjects.length === 0) {
        list.innerHTML = '<p style="color: #718096; text-align: center; padding: 1rem;">–û–±—ä–µ–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.<br>–ù–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç—ã"</p>';
        return;
    }

    list.innerHTML = detectedObjects.map((obj, index) => {
        const statusIcon = obj.annotated ? '‚úÖ' : 'üìù';
        const statusText = obj.annotated ? '–ê–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω' : '–¢—Ä–µ–±—É–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏';
        const statusClass = obj.annotated ? 'annotated' : 'pending';

        return `<div class="object-item ${statusClass}" onclick="selectObject(${index})">
            <div style="display: flex; justify-content: space-between; align-items: center;">
                <strong>${obj.id}</strong>
                <span style="font-size: 12px;">${statusIcon} ${statusText}</span>
            </div>
            <div style="font-size: 12px; color: #666; margin-top: 4px;">
                –ü–æ–∑–∏—Ü–∏—è: ${obj.bbox.x}, ${obj.bbox.y}<br>
                –†–∞–∑–º–µ—Ä: ${obj.bbox.width}√ó${obj.bbox.height}<br>
                –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${(obj.confidence * 100).toFixed(1)}%
                ${obj.annotated && obj.annotation_data ? 
                    `<br><strong>SKU:</strong> ${obj.annotation_data.sku_code}<br><strong>–ü—Ä–æ–¥—É–∫—Ç:</strong> ${obj.annotation_data.product_name}` : ''
                }
            </div>
        </div>`;
    }).join('');
}

function updateAnnotatedCount() {
    const currentSessionCount = detectedObjects.filter(obj => obj.annotated).length;

    fetch('/api/training/data')
        .then(response => response.json())
        .then(data => {
            const serverCount = data.total_annotations || 0;
            const annotatedCountElement = document.getElementById('annotatedCount');
            if (annotatedCountElement) {
                annotatedCountElement.textContent = serverCount;
            }
        })
        .catch(error => {
            const annotatedCountElement = document.getElementById('annotatedCount');
            if (annotatedCountElement) {
                annotatedCountElement.textContent = currentSessionCount;
            }
        });
}

// === CANVAS –°–û–ë–´–¢–ò–Ø ===

function setupCanvasEvents() {
    if (!overlayCanvas) return;

    // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    overlayCanvas.removeEventListener('mousedown', startDrawing);
    overlayCanvas.removeEventListener('mousemove', draw);
    overlayCanvas.removeEventListener('mouseup', stopDrawing);

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    overlayCanvas.addEventListener('mousedown', startDrawing);
    overlayCanvas.addEventListener('mousemove', draw);
    overlayCanvas.addEventListener('mouseup', stopDrawing);
}

function startDrawing(e) {
    if (!currentZoneMode) return;

    isDrawing = true;
    const rect = overlayCanvas.getBoundingClientRect();
    startPoint = {
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
    };
}

function draw(e) {
    if (!isDrawing || !currentZoneMode) return;

    const rect = overlayCanvas.getBoundingClientRect();
    const currentPoint = {
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
    };

    redrawOverlay();

    overlayCtx.strokeStyle = getZoneColor(currentZoneMode);
    overlayCtx.lineWidth = 2;
    overlayCtx.strokeRect(
        startPoint.x,
        startPoint.y,
        currentPoint.x - startPoint.x,
        currentPoint.y - startPoint.y
    );
}

function stopDrawing(e) {
    if (!isDrawing || !currentZoneMode) return;

    isDrawing = false;
    const rect = overlayCanvas.getBoundingClientRect();
    const endPoint = {
        x: e.clientX - rect.left,
        y: e.clientY - rect.top
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–æ–Ω–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–∞—è
    const minSize = 20;
    if (Math.abs(endPoint.x - startPoint.x) < minSize || Math.abs(endPoint.y - startPoint.y) < minSize) {
        showStatus('–ó–æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è - –Ω–∞—Ä–∏—Å—É–π—Ç–µ –±–æ–ª—å—à–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫', 'warning');
        redrawOverlay();
        return;
    }

    const zone = {
        type: currentZoneMode,
        points: [
            startPoint,
            {x: endPoint.x, y: startPoint.y},
            endPoint,
            {x: startPoint.x, y: endPoint.y}
        ]
    };

    if (currentZoneMode === 'gray') {
        zones.gray_zones.push(zone);
    } else {
        zones[currentZoneMode + '_zone'] = zone;
    }

    redrawOverlay();
    updateZonesCount();

    showStatus(`–ó–æ–Ω–∞ "${currentZoneMode}" —Å–æ–∑–¥–∞–Ω–∞`, 'success');

    // –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–æ–Ω
    setTimeout(() => {
        if (currentCamera && currentCamera.id) {
            fetch('/api/training/zones/save', {
                method: 'POST',
                headers: {'Content-Type': 'application/json'},
                body: JSON.stringify({
                    zones: zones,
                    camera_id: currentCamera.id,
                    camera_name: currentCamera.name
                })
            });
        }
    }, 1000);
}

// === –û–¢–†–ò–°–û–í–ö–ê ===

function redrawOverlay() {
    if (!overlayCtx) return;

    overlayCtx.clearRect(0, 0, overlayCanvas.width, overlayCanvas.height);

    // –†–∏—Å—É–µ–º –∑–æ–Ω—ã
    Object.entries(zones).forEach(([key, zone]) => {
        if (key === 'gray_zones') {
            zone.forEach(grayZone => drawZone(grayZone, 'gray'));
        } else if (zone) {
            const zoneType = key.replace('_zone', '');
            drawZone(zone, zoneType);
        }
    });

    // –†–∏—Å—É–µ–º –æ–±—ä–µ–∫—Ç—ã
    detectedObjects.forEach((obj, index) => {
        drawObject(obj, index === selectedObject);
    });
}

function drawZone(zone, type) {
    if (!zone.points || zone.points.length < 4) return;

    overlayCtx.strokeStyle = getZoneColor(type);
    overlayCtx.lineWidth = 2;
    overlayCtx.setLineDash([5, 5]);

    overlayCtx.beginPath();
    overlayCtx.moveTo(zone.points[0].x, zone.points[0].y);
    zone.points.forEach(point => {
        overlayCtx.lineTo(point.x, point.y);
    });
    overlayCtx.closePath();
    overlayCtx.stroke();

    overlayCtx.setLineDash([]);
}

function drawObject(obj, isSelected) {
    const bbox = obj.bbox;

    // –¶–≤–µ—Ç–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π –æ–±—ä–µ–∫—Ç–∞
    let strokeColor, fillColor;
    if (obj.annotated) {
        strokeColor = '#22543d';  // –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        fillColor = 'rgba(34, 84, 61, 0.1)';
    } else if (isSelected) {
        strokeColor = '#3182ce';  // –°–∏–Ω–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
        fillColor = 'rgba(49, 130, 206, 0.1)';
    } else {
        strokeColor = '#e53e3e';  // –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –æ–±—ã—á–Ω—ã—Ö
        fillColor = 'rgba(229, 62, 62, 0.05)';
    }

    // –†–∏—Å—É–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
    overlayCtx.strokeStyle = strokeColor;
    overlayCtx.fillStyle = fillColor;
    overlayCtx.lineWidth = isSelected ? 3 : 2;

    overlayCtx.fillRect(bbox.x, bbox.y, bbox.width, bbox.height);
    overlayCtx.strokeRect(bbox.x, bbox.y, bbox.width, bbox.height);

    // –ü–æ–¥–ø–∏—Å—å –æ–±—ä–µ–∫—Ç–∞
    overlayCtx.fillStyle = strokeColor;
    overlayCtx.font = 'bold 12px Arial';

    let label = obj.id;
    if (obj.annotated && obj.annotation_data) {
        label += ` (${obj.annotation_data.sku_code})`;
    }

    // –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
    const textMetrics = overlayCtx.measureText(label);
    const textWidth = textMetrics.width + 8;
    const textHeight = 16;

    overlayCtx.fillStyle = strokeColor;
    overlayCtx.fillRect(bbox.x, bbox.y - textHeight - 2, textWidth, textHeight);

    overlayCtx.fillStyle = 'white';
    overlayCtx.fillText(label, bbox.x + 4, bbox.y - 6);

    // –ò–∫–æ–Ω–∫–∞ –¥–ª—è –∞–Ω–Ω–æ—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
    if (obj.annotated) {
        overlayCtx.fillStyle = '#22543d';
        overlayCtx.font = 'bold 14px Arial';
        overlayCtx.fillText('‚úì', bbox.x + bbox.width - 20, bbox.y + 16);
    }
}

function getZoneColor(zoneType) {
    const colors = {
        'entry': '#38a169',
        'counting': '#d69e2e',
        'exit': '#e53e3e',
        'gray': '#718096'
    };
    return colors[zoneType] || '#3182ce';
}

// === –£–¢–ò–õ–ò–¢–´ ===

function generateGUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
        const r = Math.random() * 16 | 0;
        const v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

function showStatus(message, type, duration = 4000) {
    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    let statusElement = document.getElementById('statusMessage');
    if (!statusElement) {
        statusElement = document.createElement('div');
        statusElement.id = 'statusMessage';
        statusElement.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 12px 16px;
            border-radius: 6px;
            color: white;
            font-weight: bold;
            z-index: 1000;
            max-width: 350px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.2);
            transition: all 0.3s ease;
        `;
        document.body.appendChild(statusElement);
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    const colors = {
        'success': '#38a169',
        'error': '#e53e3e',
        'warning': '#d69e2e',
        'info': '#3182ce'
    };

    statusElement.style.backgroundColor = colors[type] || colors.info;
    statusElement.textContent = message;
    statusElement.style.display = 'block';
    statusElement.style.transform = 'translateX(0)';

    // –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π –ª–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    const emoji = {
        'success': '‚úÖ',
        'error': '‚ùå',
        'warning': '‚ö†Ô∏è',
        'info': '‚ÑπÔ∏è'
    };
    console.log(`${emoji[type] || '‚ÑπÔ∏è'} ${message}`);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ–º
    setTimeout(() => {
        statusElement.style.transform = 'translateX(100%)';
        setTimeout(() => {
            statusElement.style.display = 'none';
        }, 300);
    }, duration);
}