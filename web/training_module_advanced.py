# web/training_module_advanced.py
"""–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –æ–±—É—á–∞—é—â–∏–π –º–æ–¥—É–ª—å —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ HTML/CSS/JS —Ñ–∞–π–ª–∞–º–∏"""

from core.imports import *
from core.batch_training import BatchTrainingManager
import cv2
import os


class AdvancedTrainingModule:
    """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –º–æ–¥—É–ª—å –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤"""

    def __init__(self):
        self.app = Flask(__name__)
        CORS(self.app)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∫ —à–∞–±–ª–æ–Ω–∞–º –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º
        template_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), 'templates'))
        static_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), 'static'))
        print(*template_dir)
        print(*static_dir)

        self.app.template_folder = template_dir
        self.app.static_folder = static_dir
        self.app.static_url_path = '/static'

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
        self.app.config['MAX_CONTENT_LENGTH'] = 5 * 1024 * 1024 * 1024  # 5GB
        self.app.config['UPLOAD_FOLDER'] = 'uploads'
        self.app.config['TEMP_FOLDER'] = 'temp_uploads'
        self.app.config['SEND_FILE_MAX_AGE_DEFAULT'] = 0

        # –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        self.batch_manager = BatchTrainingManager()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
        self.upload_sessions = {}

        # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è
        self.current_video = None
        self.current_frame_index = 0
        self.total_frames = 0
        self.video_cap = None
        self.current_zones = {
            'entry_zone': None,
            'counting_zone': None,
            'exit_zone': None,
            'gray_zones': []
        }
        self.detected_objects = []
        self.training_data = []

        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        for folder in ['uploads', 'temp_uploads', 'training_data', 'training_data/zones', 'training_data/batches']:
            os.makedirs(folder, exist_ok=True)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —à–∞–±–ª–æ–Ω–æ–≤
        self._check_templates()

        self._setup_routes()

    def _check_templates(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —à–∞–±–ª–æ–Ω–æ–≤ –∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤"""
        required_files = [
            ('templates/training.html', 'HTML —à–∞–±–ª–æ–Ω'),
            ('static/css/training.css', 'CSS —Å—Ç–∏–ª–∏'),
            ('static/js/training.js', '–û—Å–Ω–æ–≤–Ω–æ–π JavaScript'),
            ('static/js/batch_training.js', 'JavaScript –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è')
        ]

        missing_files = []

        for file_path, description in required_files:
            full_path = os.path.join(os.path.dirname(__file__), file_path)
            if not os.path.exists(full_path):
                missing_files.append(f"{description}: {file_path}")

        if missing_files:
            print("‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤:")
            for file in missing_files:
                print(f"   - {file}")
            print("üìù –°–æ–∑–¥–∞–π—Ç–µ —ç—Ç–∏ —Ñ–∞–π–ª—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π HTML")
        else:
            print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω—ã")

    def _setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤"""

        @self.app.route('/training')
        def training_interface():
            """–ì–ª–∞–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ–±—É—á–µ–Ω–∏—è - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º —à–∞–±–ª–æ–Ω"""
            try:
                return render_template('training.html')
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")
                # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML
                return self._get_fallback_template()

        # === –ß–ê–ù–ö–û–í–ê–Ø –ó–ê–ì–†–£–ó–ö–ê ===

        @self.app.route('/api/training/start_upload', methods=['POST'])
        def start_chunked_upload():
            """–ù–∞—á–∞–ª–æ —á–∞–Ω–∫–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
            try:
                data = request.get_json()
                filename = secure_filename(data.get('filename', 'video.mp4'))
                file_size = data.get('file_size', 0)

                session_id = str(uuid.uuid4())
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                filename = f"{timestamp}_{filename}"

                temp_path = os.path.join(self.app.config['TEMP_FOLDER'], f"{session_id}_{filename}")

                self.upload_sessions[session_id] = {
                    'filename': filename,
                    'temp_path': temp_path,
                    'file_size': file_size,
                    'uploaded_size': 0,
                    'start_time': time.time(),
                    'status': 'uploading'
                }

                return jsonify({
                    'success': True,
                    'session_id': session_id,
                    'message': '–ó–∞–≥—Ä—É–∑–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
                })

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/upload_chunk', methods=['POST'])
        def upload_chunk():
            """–ó–∞–≥—Ä—É–∑–∫–∞ —á–∞–Ω–∫–∞ —Ñ–∞–π–ª–∞"""
            try:
                session_id = request.form.get('session_id')
                chunk_index = int(request.form.get('chunk_index', 0))

                if session_id not in self.upload_sessions:
                    return jsonify({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è'}), 400

                session = self.upload_sessions[session_id]

                if 'chunk' not in request.files:
                    return jsonify({'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —á–∞–Ω–∫–∞'}), 400

                chunk_file = request.files['chunk']
                chunk_data = chunk_file.read()

                # –î–æ–ø–∏—Å—ã–≤–∞–µ–º —á–∞–Ω–∫ –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ñ–∞–π–ª—É
                with open(session['temp_path'], 'ab') as f:
                    f.write(chunk_data)

                session['uploaded_size'] += len(chunk_data)
                progress = (session['uploaded_size'] / session['file_size']) * 100 if session['file_size'] > 0 else 0

                return jsonify({
                    'success': True,
                    'progress': progress,
                    'uploaded_size': session['uploaded_size']
                })

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/finish_upload', methods=['POST'])
        def finish_upload():
            """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏"""
            try:
                data = request.get_json()
                session_id = data.get('session_id')

                if session_id not in self.upload_sessions:
                    return jsonify({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω–∞—è —Å–µ—Å—Å–∏—è'}), 400

                session = self.upload_sessions[session_id]

                # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
                final_path = os.path.join(self.app.config['UPLOAD_FOLDER'], session['filename'])
                os.rename(session['temp_path'], final_path)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –≤–∏–¥–µ–æ
                if self._is_video_file(final_path):
                    success = self._load_video(final_path)

                    if success:
                        session['status'] = 'completed'

                        # –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç
                        threading.Timer(300, lambda: self.upload_sessions.pop(session_id, None)).start()

                        return jsonify({
                            'success': True,
                            'message': f'–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {self.total_frames} –∫–∞–¥—Ä–æ–≤',
                            'filename': session['filename'],
                            'total_frames': self.total_frames
                        })
                else:
                    return jsonify({'success': False, 'error': '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞'}), 400

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        # === –£–ü–†–ê–í–õ–ï–ù–ò–ï –§–ê–ô–õ–ê–ú–ò ===

        @self.app.route('/api/training/files')
        def list_files():
            """–°–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
            try:
                files = []
                upload_dir = self.app.config['UPLOAD_FOLDER']

                if os.path.exists(upload_dir):
                    for filename in os.listdir(upload_dir):
                        filepath = os.path.join(upload_dir, filename)

                        if os.path.isfile(filepath):
                            ext = os.path.splitext(filename)[1].lower()
                            video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm', '.m4v']

                            if ext in video_extensions:
                                stat = os.stat(filepath)
                                duration = self._get_video_duration(filepath)

                                files.append({
                                    'name': filename,
                                    'size_bytes': stat.st_size,
                                    'size_gb': round(stat.st_size / (1024 ** 3), 2),
                                    'size_mb': round(stat.st_size / (1024 ** 2), 1),
                                    'modified': datetime.fromtimestamp(stat.st_mtime).isoformat(),
                                    'duration': duration,
                                    'extension': ext
                                })

                files.sort(key=lambda x: x['modified'], reverse=True)
                return jsonify({'files': files})

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/files/<filename>/select', methods=['POST'])
        def select_file(filename):
            """–í—ã–±–æ—Ä —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
            try:
                filepath = os.path.join(self.app.config['UPLOAD_FOLDER'], secure_filename(filename))

                if os.path.exists(filepath):
                    success = self._load_video(filepath)
                    if success:
                        return jsonify({
                            'success': True,
                            'message': f'–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {self.total_frames} –∫–∞–¥—Ä–æ–≤',
                            'total_frames': self.total_frames,
                            'filename': filename
                        })
                    else:
                        return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ'}), 500
                else:
                    return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/files/<filename>', methods=['DELETE'])
        def delete_file(filename):
            """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
            try:
                filepath = os.path.join(self.app.config['UPLOAD_FOLDER'], secure_filename(filename))
                if os.path.exists(filepath):
                    os.remove(filepath)
                    return jsonify({'success': True})
                else:
                    return jsonify({'success': False, 'error': '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω'}), 404
            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/files/<filename>/rename', methods=['POST'])
        def rename_file(filename):
            """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
            try:
                data = request.json
                new_name = secure_filename(data.get('new_name', ''))

                old_path = os.path.join(self.app.config['UPLOAD_FOLDER'], secure_filename(filename))
                new_path = os.path.join(self.app.config['UPLOAD_FOLDER'], new_name)

                if os.path.exists(old_path) and not os.path.exists(new_path):
                    os.rename(old_path, new_path)
                    return jsonify({'success': True, 'new_name': new_name})
                else:
                    return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è'}), 400

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        # === –†–ê–ë–û–¢–ê –° –í–ò–î–ï–û –ò –ó–û–ù–ê–ú–ò ===

        @self.app.route('/api/training/zones/template', methods=['GET'])
        def get_zone_templates():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–æ–≤ –∑–æ–Ω –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–µ—á–µ–π"""
            templates = {
                'standard_oven': {
                    'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø–µ—á—å',
                    'zones': {
                        'entry_zone': {
                            'type': 'entry',
                            'points': [
                                {'x': 50, 'y': 50}, {'x': 200, 'y': 50},
                                {'x': 200, 'y': 150}, {'x': 50, 'y': 150}
                            ]
                        },
                        'counting_zone': {
                            'type': 'counting',
                            'points': [
                                {'x': 250, 'y': 200}, {'x': 900, 'y': 200},
                                {'x': 900, 'y': 600}, {'x': 250, 'y': 600}
                            ]
                        },
                        'exit_zone': {
                            'type': 'exit',
                            'points': [
                                {'x': 950, 'y': 400}, {'x': 1100, 'y': 400},
                                {'x': 1100, 'y': 500}, {'x': 950, 'y': 500}
                            ]
                        },
                        'gray_zones': []
                    }
                },
                'conveyor_oven': {
                    'name': '–ö–æ–Ω–≤–µ–π–µ—Ä–Ω–∞—è –ø–µ—á—å',
                    'zones': {
                        'entry_zone': {
                            'type': 'entry',
                            'points': [
                                {'x': 30, 'y': 100}, {'x': 150, 'y': 100},
                                {'x': 150, 'y': 200}, {'x': 30, 'y': 200}
                            ]
                        },
                        'counting_zone': {
                            'type': 'counting',
                            'points': [
                                {'x': 200, 'y': 150}, {'x': 1000, 'y': 150},
                                {'x': 1000, 'y': 650}, {'x': 200, 'y': 650}
                            ]
                        },
                        'exit_zone': {
                            'type': 'exit',
                            'points': [
                                {'x': 1050, 'y': 350}, {'x': 1200, 'y': 350},
                                {'x': 1200, 'y': 450}, {'x': 1050, 'y': 450}
                            ]
                        },
                        'gray_zones': []
                    }
                }
            }
            return jsonify({'templates': templates})

        @self.app.route('/api/training/frame/<int:frame_index>')
        def get_frame(frame_index):
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–¥—Ä–∞ –≤–∏–¥–µ–æ"""
            if self.video_cap is None:
                return jsonify({'success': False, 'error': '–í–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}), 400

            try:
                self.video_cap.set(cv2.CAP_PROP_POS_FRAMES, frame_index)
                ret, frame = self.video_cap.read()

                if ret:
                    self.current_frame_index = frame_index
                    _, buffer = cv2.imencode('.jpg', frame)
                    image_base64 = base64.b64encode(buffer).decode('utf-8')

                    return jsonify({
                        'success': True,
                        'frame_data': f"data:image/jpeg;base64,{image_base64}",
                        'frame_index': frame_index,
                        'total_frames': self.total_frames
                    })
                else:
                    return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–¥—Ä–∞'}), 500

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/zones/save', methods=['POST'])
        def save_zones_permanent():
            """–ü–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–æ–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã/–ø–µ—á–∏"""
            try:
                data = request.json
                zones_data = data.get('zones', {})
                camera_id = data.get('camera_id', 'default')
                camera_name = data.get('camera_name', f'–ö–∞–º–µ—Ä–∞ {camera_id}')

                zones_dir = 'training_data/zones'
                os.makedirs(zones_dir, exist_ok=True)

                zones_file = os.path.join(zones_dir, f"camera_{camera_id}_zones.json")
                zones_config = {
                    'camera_id': camera_id,
                    'camera_name': camera_name,
                    'zones': zones_data,
                    'created': datetime.now().isoformat() if not os.path.exists(zones_file) else None,
                    'updated': datetime.now().isoformat()
                }

                if os.path.exists(zones_file):
                    try:
                        with open(zones_file, 'r', encoding='utf-8') as f:
                            existing_config = json.load(f)
                            zones_config['created'] = existing_config.get('created')
                    except:
                        pass

                with open(zones_file, 'w', encoding='utf-8') as f:
                    json.dump(zones_config, f, ensure_ascii=False, indent=2)

                self.current_zones = zones_data
                return jsonify({
                    'success': True,
                    'message': f'–ó–æ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {camera_name}',
                    'zones_file': zones_file,
                    'camera_id': camera_id
                })

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/zones/load', methods=['POST'])
        def load_zones_permanent():
            """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–æ–Ω –¥–ª—è –∫–∞–º–µ—Ä—ã/–ø–µ—á–∏"""
            try:
                data = request.json
                camera_id = data.get('camera_id', 'default')
                zones_file = f"training_data/zones/camera_{camera_id}_zones.json"

                if os.path.exists(zones_file):
                    with open(zones_file, 'r', encoding='utf-8') as f:
                        zones_config = json.load(f)

                    self.current_zones = zones_config.get('zones', {})
                    return jsonify({
                        'success': True,
                        'zones': self.current_zones,
                        'message': f'–ó–æ–Ω—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è {zones_config.get("camera_name", f"–∫–∞–º–µ—Ä—ã {camera_id}")}',
                        'camera_id': camera_id,
                        'camera_name': zones_config.get('camera_name')
                    })
                else:
                    return jsonify({
                        'success': False,
                        'message': f'–ó–æ–Ω—ã –¥–ª—è –∫–∞–º–µ—Ä—ã {camera_id} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã',
                        'zones': {},
                        'camera_id': camera_id
                    })

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/detect_camera', methods=['POST'])
        def detect_camera_from_video():
            """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ –∏–º–µ–Ω–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
            try:
                data = request.json
                video_name = data.get('video_name', '')

                camera_id = 'default'
                camera_name = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞–º–µ—Ä–∞'

                import re
                ch_match = re.search(r'CH(\d+)', video_name)
                if ch_match:
                    camera_id = f"ch{ch_match.group(1)}"
                    camera_name = f"–ö–∞–Ω–∞–ª {ch_match.group(1)}"
                else:
                    ip_match = re.search(r'(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})', video_name)
                    if ip_match:
                        camera_id = ip_match.group(1).replace('.', '_')
                        camera_name = f"–ö–∞–º–µ—Ä–∞ {ip_match.group(1)}"
                    else:
                        base_name = video_name.split('_')[0] if '_' in video_name else video_name.split('.')[0]
                        camera_id = base_name.lower()
                        camera_name = f"–ö–∞–º–µ—Ä–∞ {base_name}"

                return jsonify({
                    'success': True,
                    'camera_id': camera_id,
                    'camera_name': camera_name,
                    'video_name': video_name
                })

            except Exception as e:
                return jsonify({
                    'success': False,
                    'camera_id': 'default',
                    'camera_name': '–ö–∞–º–µ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é',
                    'error': str(e)
                })

        # === –î–ï–¢–ï–ö–¶–ò–Ø –ò –ê–ù–ù–û–¢–ê–¶–ò–ò ===

        @self.app.route('/api/training/detect')
        def detect_objects():
            """–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫–∞–¥—Ä–µ"""
            if self.video_cap is None:
                return jsonify({'success': False, 'error': '–í–∏–¥–µ–æ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ'}), 400

            try:
                detected = self._detect_bread_objects()
                return jsonify({
                    'success': True,
                    'objects': detected
                })
            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/save_annotation', methods=['POST'])
        def save_annotation():
            """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞"""
            try:
                data = request.json
                annotation = {
                    'object_id': data.get('object_id'),
                    'bbox': data.get('bbox'),
                    'frame_index': self.current_frame_index,
                    'product_info': {
                        'guid': data.get('guid', ''),
                        'sku_code': data.get('sku_code', ''),
                        'product_name': data.get('product_name', ''),
                        'category': data.get('category', 'bread')
                    },
                    'zones': self.current_zones,
                    'timestamp': datetime.now().isoformat(),
                    'is_validated': data.get('is_validated', False)
                }

                self.training_data.append(annotation)
                success = self._save_training_data()

                if success:
                    return jsonify({
                        'success': True,
                        'annotation_id': len(self.training_data) - 1,
                        'total_annotations': len(self.training_data)
                    })
                else:
                    return jsonify({'success': False, 'error': '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞'}), 500

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/data')
        def get_training_data():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è"""
            try:
                return jsonify({
                    'zones': self.current_zones,
                    'training_data': self.training_data,
                    'total_annotations': len(self.training_data),
                    'current_video': os.path.basename(self.current_video) if self.current_video else None
                })
            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        # === API –î–õ–Ø –ü–ê–ö–ï–¢–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø ===
        # (–í—Å–µ API endpoints –∏–∑ batch_training_api.py)

        @self.app.route('/api/training/batch/create', methods=['POST'])
        def create_batch():
            """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
            try:
                data = request.json
                batch_info = {
                    'product_name': data.get('product_name', ''),
                    'sku_code': data.get('sku_code', ''),
                    'category': data.get('category', 'bread'),
                    'batch_size_estimate': data.get('batch_size_estimate', 1500),
                    'production_date': data.get('production_date', datetime.now().isoformat()),
                    'operator': data.get('operator', 'system'),
                    'notes': data.get('notes', '')
                }

                batch_id = self.batch_manager.create_batch(batch_info)

                return jsonify({
                    'success': True,
                    'batch_id': batch_id,
                    'message': f'–ü–∞—Ä—Ç–∏—è {batch_id} —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
                })

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/batch/set_template', methods=['POST'])
        def set_batch_template():
            """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —ç—Ç–∞–ª–æ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –ø–∞—Ä—Ç–∏–∏"""
            try:
                data = request.json
                template_objects = data.get('template_objects', [])

                if not template_objects:
                    return jsonify({'success': False, 'error': '–ù–µ –≤—ã–±—Ä–∞–Ω—ã —ç—Ç–∞–ª–æ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã'}), 400

                success = self.batch_manager.set_batch_template(template_objects)

                if success:
                    return jsonify({
                        'success': True,
                        'message': f'–≠—Ç–∞–ª–æ–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ {len(template_objects)} –æ–±—ä–µ–∫—Ç–æ–≤'
                    })
                else:
                    return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–∞–ª–æ–Ω'}), 500

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/batch/start_auto', methods=['POST'])
        def start_auto_training():
            """–ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
            try:
                success = self.batch_manager.start_auto_training()

                if success:
                    return jsonify({
                        'success': True,
                        'message': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ'
                    })
                else:
                    return jsonify({'success': False, 'error': '–≠—Ç–∞–ª–æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}), 400

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/batch/process_frame', methods=['POST'])
        def process_frame_auto():
            """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ —Å –¥–µ—Ç–µ–∫—Ü–∏–µ–π"""
            try:
                detected = self._detect_bread_objects()

                if not detected:
                    return jsonify({
                        'success': True,
                        'results': {'processed': 0, 'stop_required': False}
                    })

                frame_data = {
                    'frame_index': self.current_frame_index,
                    'video_file': self.current_video,
                    'timestamp': datetime.now().isoformat()
                }

                results = self.batch_manager.process_detected_objects(detected, frame_data)

                return jsonify({
                    'success': True,
                    'results': results,
                    'detected_objects': detected
                })

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/batch/anomalies')
        def get_pending_anomalies():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–Ω–æ–º–∞–ª–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"""
            try:
                anomalies = self.batch_manager.get_pending_anomalies()
                return jsonify({
                    'success': True,
                    'anomalies': anomalies
                })
            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/batch/resolve_anomaly', methods=['POST'])
        def resolve_anomaly():
            """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º"""
            try:
                data = request.json
                anomaly_id = data.get('anomaly_id')
                resolution = data.get('resolution', {})

                if anomaly_id is None:
                    return jsonify({'success': False, 'error': '–ù–µ —É–∫–∞–∑–∞–Ω ID –∞–Ω–æ–º–∞–ª–∏–∏'}), 400

                valid_actions = ['add_to_good', 'mark_as_defect', 'ignore']
                if resolution.get('action') not in valid_actions:
                    return jsonify({'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ'}), 400

                success = self.batch_manager.resolve_anomaly(anomaly_id, resolution)

                if success:
                    return jsonify({
                        'success': True,
                        'message': '–ê–Ω–æ–º–∞–ª–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∞'
                    })
                else:
                    return jsonify({'success': False, 'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∞–Ω–æ–º–∞–ª–∏—é'}), 500

            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/batch/statistics')
        def get_batch_statistics():
            """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏"""
            try:
                stats = self.batch_manager.get_batch_statistics()
                return jsonify({
                    'success': True,
                    'statistics': stats
                })
            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

        @self.app.route('/api/training/batch/stop', methods=['POST'])
        def stop_auto_training():
            """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"""
            try:
                self.batch_manager.auto_training_active = False
                if self.batch_manager.current_batch:
                    self.batch_manager.current_batch['status'] = 'stopped_manual'
                    self.batch_manager._save_batch()

                return jsonify({
                    'success': True,
                    'message': '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'
                })
            except Exception as e:
                return jsonify({'success': False, 'error': str(e)}), 500

    # === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    def _is_video_file(self, filepath):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –≤–∏–¥–µ–æ"""
        video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm']
        return os.path.splitext(filepath)[1].lower() in video_extensions

    def _get_video_duration(self, filepath):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤–∏–¥–µ–æ"""
        try:
            cap = cv2.VideoCapture(filepath)
            if cap.isOpened():
                fps = cap.get(cv2.CAP_PROP_FPS)
                frame_count = cap.get(cv2.CAP_PROP_FRAME_COUNT)
                duration = frame_count / fps if fps > 0 else 0
                cap.release()
                return round(duration, 1)
        except:
            pass
        return 0

    def _load_video(self, filepath):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
        try:
            if self.video_cap:
                self.video_cap.release()

            self.video_cap = cv2.VideoCapture(filepath)
            if not self.video_cap.isOpened():
                return False

            self.total_frames = int(self.video_cap.get(cv2.CAP_PROP_FRAME_COUNT))
            self.current_frame_index = 0
            self.current_video = filepath

            return True

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return False

    def _detect_bread_objects(self):
        """–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Ö–ª–µ–±–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º –∫–∞–¥—Ä–µ"""
        if self.video_cap is None:
            return []

        try:
            self.video_cap.set(cv2.CAP_PROP_POS_FRAMES, self.current_frame_index)
            ret, frame = self.video_cap.read()

            if not ret:
                return []

            # –ü—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ —Ü–≤–µ—Ç—É (–≤—Ä–µ–º–µ–Ω–Ω–∞—è —ç–º—É–ª—è—Ü–∏—è)
            hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)
            lower_bread = np.array([8, 50, 50])
            upper_bread = np.array([25, 255, 255])

            mask = cv2.inRange(hsv, lower_bread, upper_bread)
            kernel = np.ones((5, 5), np.uint8)
            mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
            mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)

            contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

            detected_objects = []

            for i, contour in enumerate(contours):
                area = cv2.contourArea(contour)

                if 2000 < area < 25000:
                    x, y, w, h = cv2.boundingRect(contour)
                    aspect_ratio = w / h

                    if 0.5 < aspect_ratio < 3.0:
                        if self._is_in_counting_zone(x + w // 2, y + h // 2):
                            detected_objects.append({
                                'id': f"bread_{i}",
                                'bbox': {'x': int(x), 'y': int(y), 'width': int(w), 'height': int(h)},
                                'area': int(area),
                                'confidence': 0.85,
                                'center': {'x': int(x + w // 2), 'y': int(y + h // 2)}
                            })

            self.detected_objects = detected_objects
            return detected_objects

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏: {e}")
            return []

    def _is_in_counting_zone(self, x, y):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–æ—á–∫–∏ –≤ –∑–æ–Ω–µ –ø–æ–¥—Å—á–µ—Ç–∞"""
        counting_zone = self.current_zones.get('counting_zone')
        if not counting_zone:
            return True

        if 'points' in counting_zone and len(counting_zone['points']) >= 4:
            xs = [p['x'] for p in counting_zone['points']]
            ys = [p['y'] for p in counting_zone['points']]
            min_x, max_x = min(xs), max(xs)
            min_y, max_y = min(ys), max(ys)

            return min_x <= x <= max_x and min_y <= y <= max_y

        return True

    def _save_training_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"training_data/annotations_{timestamp}.json"

            data_to_save = {
                'video_file': os.path.basename(self.current_video) if self.current_video else None,
                'total_frames': self.total_frames,
                'current_frame_index': self.current_frame_index,
                'zones': self.current_zones,
                'annotations': self.training_data,
                'created': datetime.now().isoformat(),
                'total_objects': len(self.training_data)
            }

            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(data_to_save, f, ensure_ascii=False, indent=2)

            return True

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è: {e}")
            return False

    def _get_fallback_template(self):
        """–ü—Ä–æ—Å—Ç–æ–π fallback HTML –µ—Å–ª–∏ —à–∞–±–ª–æ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"""
        return '''
<!DOCTYPE html>
<html>
<head>
    <title>–û–±—É—á–µ–Ω–∏–µ - Fallback</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 2rem; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 2rem; border-radius: 8px; }
        .error { background: #fed7d7; color: #742a2a; padding: 1rem; border-radius: 4px; margin-bottom: 2rem; }
    </style>
</head>
<body>
    <div class="container">
        <div class="error">
            ‚ö†Ô∏è <strong>–§–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!</strong><br>
            –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã HTML/CSS/JS –≤ –ø–∞–ø–∫–∞—Ö web/templates/ –∏ web/static/
        </div>
        <h1>üß† –û–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è</h1>
        <p>–≠—Ç–æ—Ç –ø—Ä–æ—Å—Ç–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª—ã —à–∞–±–ª–æ–Ω–æ–≤.</p>
        <a href="/">‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
    </div>
</body>
</html>
        '''

    def run(self, host='0.0.0.0', port=5001, debug=False):
        """–ó–∞–ø—É—Å–∫ –º–æ–¥—É–ª—è"""
        self.app.run(host=host, port=port, debug=debug)


if __name__ == '__main__':
    module = AdvancedTrainingModule()
    module.run(debug=True)