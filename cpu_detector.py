# cpu_detector.py - CPU –¥–µ—Ç–µ–∫—Ç–æ—Ä –∏ —Å–∏—Å—Ç–µ–º–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
import cv2
import numpy as np
import time
import threading
from collections import deque
from ultralytics import YOLO


class CPUBreadDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä —Ö–ª–µ–±–∞ –Ω–∞ CPU –¥–ª—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, model_path='yolov8n.pt'):
        print("üñ•Ô∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CPU –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—É—é YOLOv8 –º–æ–¥–µ–ª—å
        try:
            self.model = YOLO(model_path)
            print("‚úÖ YOLOv8 –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        except:
            print("‚ö†Ô∏è  YOLOv8 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –¥–µ—Ç–µ–∫—Ü–∏—é")
            self.model = None

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.inference_times = []

        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ö–ª–µ–±–∞
        self.bread_size_range = (8000, 35000)  # –ø–ª–æ—â–∞–¥—å –≤ –ø–∏–∫—Å–µ–ª—è—Ö
        self.marker_size_range = (1000, 8000)  # –ø–ª–æ—â–∞–¥—å –º–∞—Ä–∫–µ—Ä–æ–≤

    def detect(self, frame):
        """–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ –∫–∞–¥—Ä–µ"""
        start_time = time.time()

        if self.model:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º YOLOv8 –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            results = self.model(frame, verbose=False)
            detections = self._process_yolo_results(results, frame)
        else:
            # –ü—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ –∫–æ–Ω—Ç—É—Ä–∞–º
            detections = self._simple_contour_detection(frame)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        inference_time = time.time() - start_time
        self.inference_times.append(inference_time)
        if len(self.inference_times) > 50:
            self.inference_times.pop(0)

        return detections

    def _process_yolo_results(self, results, frame):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ YOLO"""
        detections = []

        for r in results:
            boxes = r.boxes
            if boxes is not None:
                for box in boxes:
                    x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                    conf = box.conf[0].cpu().numpy()
                    cls = int(box.cls[0].cpu().numpy())

                    if conf > 0.3:  # –ù–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                        detection = {
                            'class_id': cls,
                            'class_name': 'object',  # –û–±—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                            'confidence': float(conf),
                            'bbox': (int(x1), int(y1), int(x2), int(y2)),
                            'center': ((x1 + x2) / 2, (y1 + y2) / 2)
                        }
                        detections.append(detection)

        return detections

    def _simple_contour_detection(self, frame):
        """–ü—Ä–æ—Å—Ç–∞—è –¥–µ—Ç–µ–∫—Ü–∏—è –ø–æ –∫–æ–Ω—Ç—É—Ä–∞–º (fallback)"""
        detections = []

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HSV –¥–ª—è –ª—É—á—à–µ–π –¥–µ—Ç–µ–∫—Ü–∏–∏ —Ö–ª–µ–±–∞
        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)

        # –ú–∞—Å–∫–∞ –¥–ª—è —Ö–ª–µ–±–Ω—ã—Ö —Ü–≤–µ—Ç–æ–≤ (–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π/–∑–æ–ª–æ—Ç–∏—Å—Ç—ã–π)
        lower_bread = np.array([10, 50, 50])
        upper_bread = np.array([30, 255, 255])
        bread_mask = cv2.inRange(hsv, lower_bread, upper_bread)

        # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        kernel = np.ones((5, 5), np.uint8)
        bread_mask = cv2.morphologyEx(bread_mask, cv2.MORPH_CLOSE, kernel)
        bread_mask = cv2.morphologyEx(bread_mask, cv2.MORPH_OPEN, kernel)

        # –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç—É—Ä–æ–≤
        contours, _ = cv2.findContours(bread_mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

        for contour in contours:
            area = cv2.contourArea(contour)

            # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ä–∞–∑–º–µ—Ä—É
            if self.bread_size_range[0] < area < self.bread_size_range[1]:
                x, y, w, h = cv2.boundingRect(contour)

                detection = {
                    'class_id': 1,
                    'class_name': 'bread',
                    'confidence': 0.8,
                    'bbox': (x, y, x + w, y + h),
                    'center': (x + w / 2, y + h / 2)
                }
                detections.append(detection)

            elif self.marker_size_range[0] < area < self.marker_size_range[1]:
                # –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤ –ø–æ —Ñ–æ—Ä–º–µ
                x, y, w, h = cv2.boundingRect(contour)
                aspect_ratio = w / h

                marker_type = 'unknown'
                if 0.8 < aspect_ratio < 1.2:
                    marker_type = 'square'
                elif aspect_ratio > 1.5:
                    marker_type = 'triangle'
                else:
                    marker_type = 'circle'

                detection = {
                    'class_id': 2,
                    'class_name': marker_type,
                    'confidence': 0.7,
                    'bbox': (x, y, x + w, y + h),
                    'center': (x + w / 2, y + h / 2)
                }
                detections.append(detection)

        return detections

    def get_performance_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        if not self.inference_times:
            return {'avg_time': 0, 'fps': 0, 'device': 'CPU'}

        avg_time = np.mean(self.inference_times)
        fps = 1.0 / avg_time if avg_time > 0 else 0

        return {
            'avg_inference_time': avg_time,
            'fps': fps,
            'min_time': np.min(self.inference_times),
            'max_time': np.max(self.inference_times),
            'device': 'CPU'
        }


class CPUCameraProcessor:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–∞–º–µ—Ä –¥–ª—è CPU —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, camera_ip, login, password, oven_id):
        self.camera_ip = camera_ip
        self.login = login
        self.password = password
        self.oven_id = oven_id

        # CPU –¥–µ—Ç–µ–∫—Ç–æ—Ä
        self.detector = CPUBreadDetector()

        # –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–∫–µ—Ä
        self.simple_tracker = SimpleObjectTracker()

        # –ü–æ—Ç–æ–∫–∏ –∏ –æ—á–µ—Ä–µ–¥–∏
        self.cap = None
        self.running = False
        self.detection_results = deque(maxlen=50)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.fps_counter = 0
        self.last_fps_time = time.time()
        self.current_fps = 0

    def connect_camera(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IP-–∫–∞–º–µ—Ä–µ"""
        rtsp_paths = [
            f"rtsp://{self.login}:{self.password}@{self.camera_ip}/stream1",
            f"rtsp://{self.login}:{self.password}@{self.camera_ip}/stream0",
            f"rtsp://{self.login}:{self.password}@{self.camera_ip}/live"
        ]

        for rtsp_url in rtsp_paths:
            print(f"üîå –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {rtsp_url.replace(self.password, '***')}")
            self.cap = cv2.VideoCapture(rtsp_url)

            if self.cap.isOpened():
                self.cap.set(cv2.CAP_PROP_BUFFER_SIZE, 1)
                self.cap.set(cv2.CAP_PROP_FPS, 10)  # –ù–∏–∑–∫–∏–π FPS –¥–ª—è CPU

                ret, frame = self.cap.read()
                if ret:
                    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {frame.shape[1]}x{frame.shape[0]}")
                    return True

        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ {self.camera_ip}")
        return False

    def start_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.running = True

        # –û–¥–∏–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–ª—è CPU)
        process_thread = threading.Thread(target=self._process_loop, daemon=True)
        process_thread.start()

        print(f"üé¨ CPU –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–µ—á–∏ {self.oven_id}")

    def _process_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        while self.running and self.cap:
            ret, frame = self.cap.read()
            if ret:
                timestamp = time.time()

                # –î–µ—Ç–µ–∫—Ü–∏—è (–∫–∞–∂–¥—ã–π 3-–π –∫–∞–¥—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ CPU)
                if self.fps_counter % 3 == 0:
                    detections = self.detector.detect(frame)

                    # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                    tracked_objects = self.simple_tracker.update(detections)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result = {
                        'timestamp': timestamp,
                        'detections': detections,
                        'tracked_objects': tracked_objects,
                        'performance': self.detector.get_performance_stats()
                    }

                    self.detection_results.append(result)

                # –û–±–Ω–æ–≤–ª—è–µ–º FPS
                self._update_fps()

            time.sleep(0.1)  # 10 FPS –¥–ª—è CPU

    def _update_fps(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS"""
        self.fps_counter += 1
        current_time = time.time()

        if current_time - self.last_fps_time >= 1.0:
            self.current_fps = self.fps_counter
            self.fps_counter = 0
            self.last_fps_time = current_time

    def get_latest_results(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if self.detection_results:
            return self.detection_results[-1]
        return None

    def stop_processing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.running = False
        if self.cap:
            self.cap.release()


class SimpleObjectTracker:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–∫–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è CPU –≤–µ—Ä—Å–∏–∏"""

    def __init__(self):
        self.objects = {}
        self.next_id = 0
        self.max_distance = 100

    def update(self, detections):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"""
        if not detections:
            return self.objects

        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        current_centers = [(d['center'][0], d['center'][1]) for d in detections]

        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã - –∫–∞–∂–¥—É—é –¥–µ—Ç–µ–∫—Ü–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º
        self.objects = {}
        for i, detection in enumerate(detections):
            self.objects[i] = {
                'center': detection['center'],
                'class_name': detection['class_name'],
                'confidence': detection['confidence']
            }

        return self.objects


class CPUTestSystem:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ TPU"""

    def __init__(self):
        self.cameras = {}
        self.running = False

    def add_camera(self, oven_id, camera_ip, login, password):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã"""
        processor = CPUCameraProcessor(camera_ip, login, password, oven_id)

        if processor.connect_camera():
            self.cameras[oven_id] = processor
            print(f"‚úÖ –ö–∞–º–µ—Ä–∞ –ø–µ—á–∏ {oven_id} –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–º–µ—Ä—É –ø–µ—á–∏ {oven_id}")
            return False

    def start_testing(self):
        """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("üöÄ –ó–∞–ø—É—Å–∫ CPU —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

        for processor in self.cameras.values():
            processor.start_processing()

        self.running = True

        try:
            self._monitoring_loop()
        except KeyboardInterrupt:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
            self.stop()

    def _monitoring_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while self.running:
            print("\n" + "=" * 60)
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê CPU –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
            print("=" * 60)

            for oven_id, processor in self.cameras.items():
                results = processor.get_latest_results()

                if results:
                    detections = results['detections']
                    performance = results['performance']

                    bread_count = len([d for d in detections if d['class_name'] == 'bread'])
                    marker_count = len([d for d in detections if d['class_name'] in ['circle', 'square', 'triangle']])

                    print(f"\nüî• –ü–µ—á—å {oven_id}:")
                    print(f"   üìπ FPS: {processor.current_fps:2d}")
                    print(f"   üß† –û–±—Ä–∞–±–æ—Ç–∫–∞: {performance['fps']:.1f} FPS")
                    print(f"   ü•ñ –•–ª–µ–±: {bread_count} —à—Ç")
                    print(f"   üéØ –ú–∞—Ä–∫–µ—Ä—ã: {marker_count} —à—Ç")
                    print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è –¥–µ—Ç–µ–∫—Ü–∏–∏: {performance['avg_inference_time'] * 1000:.1f}–º—Å")
                else:
                    print(f"\nüî• –ü–µ—á—å {oven_id}: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

            time.sleep(10)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.running = False
        for processor in self.cameras.values():
            processor.stop_processing()
        print("‚úÖ CPU —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")