# annotation_tool.py - –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
import cv2
import json
import os
from dataclasses import dataclass
from typing import List, Tuple
import numpy as np


@dataclass
class BoundingBox:
    x1: int
    y1: int
    x2: int
    y2: int
    class_name: str
    confidence: float = 1.0


class AnnotationTool:
    """–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""

    def __init__(self, images_dir, annotations_dir):
        self.images_dir = images_dir
        self.annotations_dir = annotations_dir
        self.current_image = None
        self.current_annotations = []
        self.drawing = False
        self.start_point = None
        self.current_class = 'bread'

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        os.makedirs(annotations_dir, exist_ok=True)

        # –ö–ª–∞—Å—Å—ã –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        self.classes = ['bread', 'circle', 'square', 'triangle', 'diamond', 'star', 'defective_bread']
        self.class_colors = {
            'bread': (0, 255, 0),  # –ó–µ–ª–µ–Ω—ã–π
            'circle': (255, 0, 0),  # –°–∏–Ω–∏–π
            'square': (0, 0, 255),  # –ö—Ä–∞—Å–Ω—ã–π
            'triangle': (255, 255, 0),  # –ì–æ–ª—É–±–æ–π
            'diamond': (255, 0, 255),  # –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            'star': (0, 255, 255),  # –ñ–µ–ª—Ç—ã–π
            'defective_bread': (0, 128, 255)  # –û—Ä–∞–Ω–∂–µ–≤—ã–π
        }

        print("üè∑Ô∏è  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        print(f"üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {images_dir}")
        print(f"üìÅ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {annotations_dir}")
        print(f"üé® –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª–∞—Å—Å—ã: {', '.join(self.classes)}")

    def annotate_dataset(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏"""
        image_files = [f for f in os.listdir(self.images_dir)
                       if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

        if not image_files:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            return

        image_files.sort()

        print("\nüè∑Ô∏è  –ò–ù–°–¢–†–£–ú–ï–ù–¢ –ê–ù–ù–û–¢–ê–¶–ò–ò")
        print("=" * 50)
        self._print_instructions()
        print(f"üì∏ –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏")

        current_idx = 0

        while current_idx < len(image_files):
            image_file = image_files[current_idx]
            print(f"\nüì∑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {image_file} ({current_idx + 1}/{len(image_files)})")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_path = os.path.join(self.images_dir, image_file)
            self.current_image = cv2.imread(image_path)

            if self.current_image is None:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {image_file}")
                current_idx += 1
                continue

            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
            self._load_annotations(image_file)

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º—ã—à–∏
            cv2.namedWindow('Annotation Tool', cv2.WINDOW_NORMAL)
            cv2.setMouseCallback('Annotation Tool', self._mouse_callback)

            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            while True:
                display_image = self._draw_annotations()
                cv2.imshow('Annotation Tool', display_image)

                key = cv2.waitKey(1) & 0xFF

                if key == ord('n'):  # –°–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    current_idx += 1
                    break
                elif key == ord('p'):  # –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    current_idx = max(0, current_idx - 1)
                    break
                elif key == ord('s'):  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
                    self._save_annotations(image_file)
                    print(f"üíæ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è {image_file}")
                elif key == ord('d'):  # –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é
                    if self.current_annotations:
                        deleted = self.current_annotations.pop()
                        print(f"üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è: {deleted.class_name}")
                elif key == ord('c'):  # –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
                    self.current_annotations.clear()
                    print("üóëÔ∏è  –í—Å–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –æ—á–∏—â–µ–Ω—ã")
                elif key == ord('a'):  # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É
                    self._save_annotations(image_file)
                    current_idx += 1
                    break
                elif key == ord('h'):  # –ü–æ–º–æ—â—å
                    self._print_instructions()
                elif key == ord('q'):  # –í—ã—Ö–æ–¥
                    self._save_annotations(image_file)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º
                    cv2.destroyAllWindows()
                    return
                elif ord('1') <= key <= ord('7'):  # –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞
                    class_idx = key - ord('1')
                    if class_idx < len(self.classes):
                        self.current_class = self.classes[class_idx]
                        print(f"üè∑Ô∏è  –í—ã–±—Ä–∞–Ω –∫–ª–∞—Å—Å: {self.current_class}")

        cv2.destroyAllWindows()
        print("\n‚úÖ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        self._print_annotation_summary()

    def _print_instructions(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
        print("\nüìã –£–ü–†–ê–í–õ–ï–ù–ò–ï:")
        print("  üñ±Ô∏è  –õ–µ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –º—ã—à–∏: –†–∏—Å–æ–≤–∞—Ç—å –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫")
        print("  [1-7] –í—ã–±–æ—Ä –∫–ª–∞—Å—Å–∞:")
        for i, class_name in enumerate(self.classes):
            color_name = list(self.class_colors.keys())[i]
            print(f"    [{i + 1}] {class_name}")
        print("\n  [n] –°–ª–µ–¥—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        print("  [p] –ü—Ä–µ–¥—ã–¥—É—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        print("  [s] –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏")
        print("  [a] –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ + —Å–ª–µ–¥—É—é—â–µ–µ")
        print("  [d] –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é")
        print("  [c] –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏")
        print("  [h] –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
        print("  [q] –í—ã—Ö–æ–¥")
        print("=" * 50)

    def _mouse_callback(self, event, x, y, flags, param):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏"""
        if event == cv2.EVENT_LBUTTONDOWN:
            self.drawing = True
            self.start_point = (x, y)

        elif event == cv2.EVENT_LBUTTONUP:
            if self.drawing and self.start_point:
                # –°–æ–∑–¥–∞–µ–º bounding box
                x1, y1 = self.start_point
                x2, y2 = x, y

                # –£–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ
                bbox = BoundingBox(
                    x1=min(x1, x2),
                    y1=min(y1, y2),
                    x2=max(x1, x2),
                    y2=max(y1, y2),
                    class_name=self.current_class
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
                width = bbox.x2 - bbox.x1
                height = bbox.y2 - bbox.y1

                if width > 10 and height > 10:
                    self.current_annotations.append(bbox)
                    print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è: {self.current_class} ({width}x{height})")
                else:
                    print("‚ö†Ô∏è  –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫, –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–∞")

                self.drawing = False
                self.start_point = None

        elif event == cv2.EVENT_MOUSEMOVE:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –ø—Ä–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏–∏
            if self.drawing and self.start_point:
                pass  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ _draw_annotations

    def _draw_annotations(self):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏"""
        display_image = self.current_image.copy()

        # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
        for bbox in self.current_annotations:
            color = self.class_colors.get(bbox.class_name, (128, 128, 128))

            # –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
            cv2.rectangle(display_image, (bbox.x1, bbox.y1), (bbox.x2, bbox.y2), color, 2)

            # –ü–æ–¥–ø–∏—Å—å –∫–ª–∞—Å—Å–∞
            label = f"{bbox.class_name}"
            label_size = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.6, 2)[0]

            # –§–æ–Ω –¥–ª—è —Ç–µ–∫—Å—Ç–∞
            cv2.rectangle(display_image,
                          (bbox.x1, bbox.y1 - label_size[1] - 8),
                          (bbox.x1 + label_size[0] + 4, bbox.y1),
                          color, -1)

            # –¢–µ–∫—Å—Ç
            cv2.putText(display_image, label,
                        (bbox.x1 + 2, bbox.y1 - 4),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∏—Å—É–µ–º—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        if self.drawing and self.start_point:
            mouse_pos = cv2.getWindowProperty('Annotation Tool', cv2.WND_PROP_AUTOSIZE)
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self._draw_info_panel(display_image)

        return display_image

    def _draw_info_panel(self, image):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        h, w = image.shape[:2]

        # –§–æ–Ω –¥–ª—è –ø–∞–Ω–µ–ª–∏
        panel_height = 120
        cv2.rectangle(image, (0, h - panel_height), (w, h), (0, 0, 0), -1)

        # –¢–µ–∫—É—â–∏–π –∫–ª–∞—Å—Å
        current_color = self.class_colors.get(self.current_class, (255, 255, 255))
        cv2.putText(image, f"Current class: {self.current_class}",
                    (10, h - 90), cv2.FONT_HERSHEY_SIMPLEX, 0.7, current_color, 2)

        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
        cv2.putText(image, f"Annotations: {len(self.current_annotations)}",
                    (10, h - 60), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∞—Å—Å–∞–º
        class_counts = {}
        for bbox in self.current_annotations:
            class_counts[bbox.class_name] = class_counts.get(bbox.class_name, 0) + 1

        stats_text = " | ".join([f"{cls}: {count}" for cls, count in class_counts.items()])
        if stats_text:
            cv2.putText(image, stats_text,
                        (10, h - 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (200, 200, 200), 1)

        # –ü–æ–¥—Å–∫–∞–∑–∫–∞
        cv2.putText(image, "Press [h] for help",
                    (w - 200, h - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (150, 150, 150), 1)

    def _load_annotations(self, image_file):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π"""
        annotation_file = os.path.splitext(image_file)[0] + '.json'
        annotation_path = os.path.join(self.annotations_dir, annotation_file)

        self.current_annotations = []

        if os.path.exists(annotation_path):
            try:
                with open(annotation_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                for ann in data.get('annotations', []):
                    bbox = BoundingBox(
                        x1=ann['x1'], y1=ann['y1'],
                        x2=ann['x2'], y2=ann['y2'],
                        class_name=ann['class_name'],
                        confidence=ann.get('confidence', 1.0)
                    )
                    self.current_annotations.append(bbox)

                print(f"üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.current_annotations)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π")

            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π: {e}")

    def _save_annotations(self, image_file):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π"""
        if not self.current_annotations:
            return

        annotation_file = os.path.splitext(image_file)[0] + '.json'
        annotation_path = os.path.join(self.annotations_dir, annotation_file)

        data = {
            'image_file': image_file,
            'image_size': {
                'width': self.current_image.shape[1],
                'height': self.current_image.shape[0],
                'channels': self.current_image.shape[2]
            },
            'annotations': []
        }

        for bbox in self.current_annotations:
            annotation = {
                'x1': bbox.x1, 'y1': bbox.y1,
                'x2': bbox.x2, 'y2': bbox.y2,
                'class_name': bbox.class_name,
                'confidence': bbox.confidence,
                'width': bbox.x2 - bbox.x1,
                'height': bbox.y2 - bbox.y1,
                'area': (bbox.x2 - bbox.x1) * (bbox.y2 - bbox.y1)
            }
            data['annotations'].append(annotation)

        try:
            with open(annotation_path, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

    def _print_annotation_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏"""
        annotation_files = [f for f in os.listdir(self.annotations_dir)
                            if f.endswith('.json')]

        if not annotation_files:
            print("üìä –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return

        total_annotations = 0
        class_stats = {}

        for ann_file in annotation_files:
            ann_path = os.path.join(self.annotations_dir, ann_file)
            try:
                with open(ann_path, 'r', encoding='utf-8') as f:
                    data = json.load(f)

                for ann in data.get('annotations', []):
                    class_name = ann['class_name']
                    class_stats[class_name] = class_stats.get(class_name, 0) + 1
                    total_annotations += 1

            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {ann_file}: {e}")

        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ê–ù–ù–û–¢–ê–¶–ò–ò")
        print("=" * 40)
        print(f"üñºÔ∏è  –§–∞–π–ª–æ–≤ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏: {len(annotation_files)}")
        print(f"üè∑Ô∏è  –í—Å–µ–≥–æ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π: {total_annotations}")
        print("\nüìà –ü–æ –∫–ª–∞—Å—Å–∞–º:")

        for class_name, count in sorted(class_stats.items()):
            percentage = (count / total_annotations * 100) if total_annotations > 0 else 0
            print(f"   {class_name}: {count} ({percentage:.1f}%)")

        print("=" * 40)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏"""
    import argparse

    parser = argparse.ArgumentParser(description='–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏')
    parser.add_argument('--images', default='training_data/images',
                        help='–ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏')
    parser.add_argument('--annotations', default='training_data/annotations',
                        help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π')

    args = parser.parse_args()

    if not os.path.exists(args.images):
        print(f"‚ùå –ü–∞–ø–∫–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.images}")
        print("   –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: python training_pipeline.py")
        return

    print("üè∑Ô∏è  –ò–ù–°–¢–†–£–ú–ï–ù–¢ –ê–ù–ù–û–¢–ê–¶–ò–ò –î–ê–ù–ù–´–•")
    print("=" * 50)
    print(f"üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {args.images}")
    print(f"üìÅ –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {args.annotations}")

    try:
        annotator = AnnotationTool(args.images, args.annotations)
        annotator.annotate_dataset()

    except KeyboardInterrupt:
        print("\nüõë –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()