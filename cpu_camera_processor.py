import cv2
import threading
import time
from collections import deque


class CPUCameraProcessor:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∫–∞–º–µ—Ä –¥–ª—è CPU —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""

    def __init__(self, camera_ip, login, password, oven_id):
        self.camera_ip = camera_ip
        self.login = login
        self.password = password
        self.oven_id = oven_id

        # CPU –¥–µ—Ç–µ–∫—Ç–æ—Ä
        self.detector = CPUBreadDetector()

        # –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–∫–µ—Ä
        self.simple_tracker = SimpleObjectTracker()

        # –ü–æ—Ç–æ–∫–∏ –∏ –æ—á–µ—Ä–µ–¥–∏
        self.cap = None
        self.running = False
        self.detection_results = deque(maxlen=50)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.fps_counter = 0
        self.last_fps_time = time.time()
        self.current_fps = 0

    def connect_camera(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ IP-–∫–∞–º–µ—Ä–µ"""
        rtsp_paths = [
            f"rtsp://{self.login}:{self.password}@{self.camera_ip}/stream1",
            f"rtsp://{self.login}:{self.password}@{self.camera_ip}/stream0",
            f"rtsp://{self.login}:{self.password}@{self.camera_ip}/live"
        ]

        for rtsp_url in rtsp_paths:
            print(f"üîå –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è: {rtsp_url.replace(self.password, '***')}")
            self.cap = cv2.VideoCapture(rtsp_url)

            if self.cap.isOpened():
                self.cap.set(cv2.CAP_PROP_BUFFER_SIZE, 1)
                self.cap.set(cv2.CAP_PROP_FPS, 10)  # –ù–∏–∑–∫–∏–π FPS –¥–ª—è CPU

                ret, frame = self.cap.read()
                if ret:
                    print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {frame.shape[1]}x{frame.shape[0]}")
                    return True

        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ {self.camera_ip}")
        return False

    def start_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.running = True

        # –û–¥–∏–Ω –ø–æ—Ç–æ–∫ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–ª—è CPU)
        process_thread = threading.Thread(target=self._process_loop, daemon=True)
        process_thread.start()

        print(f"üé¨ CPU –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–µ—á–∏ {self.oven_id}")

    def _process_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        while self.running and self.cap:
            ret, frame = self.cap.read()
            if ret:
                timestamp = time.time()

                # –î–µ—Ç–µ–∫—Ü–∏—è (–∫–∞–∂–¥—ã–π 3-–π –∫–∞–¥—Ä –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ CPU)
                if self.fps_counter % 3 == 0:
                    detections = self.detector.detect(frame)

                    # –ü—Ä–æ—Å—Ç–æ–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ
                    tracked_objects = self.simple_tracker.update(detections)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    result = {
                        'timestamp': timestamp,
                        'detections': detections,
                        'tracked_objects': tracked_objects,
                        'performance': self.detector.get_performance_stats()
                    }

                    self.detection_results.append(result)

                # –û–±–Ω–æ–≤–ª—è–µ–º FPS
                self._update_fps()

            time.sleep(0.1)  # 10 FPS –¥–ª—è CPU

    def _update_fps(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS"""
        self.fps_counter += 1
        current_time = time.time()

        if current_time - self.last_fps_time >= 1.0:
            self.current_fps = self.fps_counter
            self.fps_counter = 0
            self.last_fps_time = current_time

    def get_latest_results(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        if self.detection_results:
            return self.detection_results[-1]
        return None

    def stop_processing(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        self.running = False
        if self.cap:
            self.cap.release()


class SimpleObjectTracker:
    """–ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–∫–µ—Ä –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è CPU –≤–µ—Ä—Å–∏–∏"""

    def __init__(self):
        self.objects = {}
        self.next_id = 0
        self.max_distance = 100

    def update(self, detections):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–µ—Ä–∞"""
        if not detections:
            return self.objects

        # –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
        current_centers = [(d['center'][0], d['center'][1]) for d in detections]

        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã - –∫–∞–∂–¥—É—é –¥–µ—Ç–µ–∫—Ü–∏—é —Å—á–∏—Ç–∞–µ–º –Ω–æ–≤—ã–º –æ–±—ä–µ–∫—Ç–æ–º
        self.objects = {}
        for i, detection in enumerate(detections):
            self.objects[i] = {
                'center': detection['center'],
                'class_name': detection['class_name'],
                'confidence': detection['confidence']
            }

        return self.objects