#!/usr/bin/env python3
# test_tpu.py - –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Coral TPU

import sys
import time
import numpy as np


def check_basic_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
    print("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")

    try:
        import cv2
        print(f"‚úÖ OpenCV {cv2.__version__}")
    except ImportError as e:
        print(f"‚ùå OpenCV: {e}")
        return False

    try:
        import numpy as np
        print(f"‚úÖ NumPy {np.__version__}")
    except ImportError as e:
        print(f"‚ùå NumPy: {e}")
        return False

    return True


def check_coral_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–æ–≤ Coral TPU"""
    print("\nüß† –ü—Ä–æ–≤–µ—Ä–∫–∞ Coral TPU –±–∏–±–ª–∏–æ—Ç–µ–∫...")

    try:
        from pycoral.utils import edgetpu
        print("‚úÖ pycoral.utils.edgetpu")
    except ImportError as e:
        print(f"‚ùå pycoral.utils.edgetpu: {e}")
        return False

    try:
        from pycoral.utils import dataset
        print("‚úÖ pycoral.utils.dataset")
    except ImportError as e:
        print(f"‚ùå pycoral.utils.dataset: {e}")
        return False

    try:
        from pycoral.adapters import common, detect
        print("‚úÖ pycoral.adapters")
    except ImportError as e:
        print(f"‚ùå pycoral.adapters: {e}")
        return False

    try:
        import tflite_runtime.interpreter as tflite
        print("‚úÖ tflite_runtime")
    except ImportError as e:
        print(f"‚ùå tflite_runtime: {e}")
        return False

    return True


def detect_tpu_devices():
    """–ü–æ–∏—Å–∫ TPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    print("\nüîç –ü–æ–∏—Å–∫ TPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")

    try:
        from pycoral.utils import edgetpu

        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö TPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices = edgetpu.list_edge_tpus()

        print(f"üß† –ù–∞–π–¥–µ–Ω–æ TPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")

        if devices:
            for i, device in enumerate(devices):
                print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {i}: {device}")
            return devices
        else:
            print("‚ö†Ô∏è  TPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            print("   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - Coral TPU –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            print("   - –î—Ä–∞–π–≤–µ—Ä—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            print("   - –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
            return []

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ TPU: {e}")
        return []


def test_tpu_performance():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ TPU"""
    print("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ TPU...")

    try:
        from pycoral.utils import edgetpu
        from pycoral.adapters import common
        import tflite_runtime.interpreter as tflite

        devices = edgetpu.list_edge_tpus()
        if not devices:
            print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö TPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return False

        # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä —Å –ø—Ä–æ—Å—Ç–æ–π –º–æ–¥–µ–ª—å—é
        # –ï—Å–ª–∏ —É –Ω–∞—Å –Ω–µ—Ç –º–æ–¥–µ–ª–∏, —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–π —Ç–µ—Å—Ç
        print("   üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞...")

        # –î–ª—è —Ç–µ—Å—Ç–∞ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
        device = devices[0]
        print(f"   üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {device}")

        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–∞ —Ä–µ–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
        # –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —Ä–∞–±–æ—Ç–∞—é—Ç
        print("   ‚úÖ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ TPU —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã")

        return True

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ TPU: {e}")
        return False


def test_system_resources():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤"""
    print("\nüíª –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")

    try:
        import psutil

        # –ü–∞–º—è—Ç—å
        memory = psutil.virtual_memory()
        print(f"   üíæ –ü–∞–º—è—Ç—å: {memory.total // (1024 ** 3)} GB "
              f"(–¥–æ—Å—Ç—É–ø–Ω–æ: {memory.available // (1024 ** 3)} GB)")

        # CPU
        cpu_count = psutil.cpu_count()
        cpu_freq = psutil.cpu_freq()
        print(f"   üñ•Ô∏è  CPU: {cpu_count} —è–¥–µ—Ä")
        if cpu_freq:
            print(f"        –ß–∞—Å—Ç–æ—Ç–∞: {cpu_freq.max:.0f} MHz")

        # –î–∏—Å–∫
        disk = psutil.disk_usage('.')
        print(f"   üíΩ –î–∏—Å–∫: {disk.total // (1024 ** 3)} GB "
              f"(—Å–≤–æ–±–æ–¥–Ω–æ: {disk.free // (1024 ** 3)} GB)")

        return True

    except ImportError:
        print("   ‚ö†Ô∏è  psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º:")
        print("       pip install psutil")
        return True
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Å—É—Ä—Å–æ–≤: {e}")
        return False


def test_camera_compatibility():
    """–¢–µ—Å—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–∞–º–µ—Ä–∞–º–∏"""
    print("\nüìπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–∞–º–µ—Ä–∞–º–∏...")

    try:
        import cv2

        # –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ VideoCapture
        test_url = "rtsp://admin:H3lloK1tty@10.12.56.65:554/ch01/0"
        print(f"   üîó –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–µ...")

        cap = cv2.VideoCapture(test_url)
        if cap.isOpened():
            ret, frame = cap.read()
            if ret:
                print(f"   ‚úÖ –ö–∞–º–µ—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–∞: {frame.shape}")

                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∫–∞–¥—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                test_frame = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
                print(f"   ‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–¥—Ä —Å–æ–∑–¥–∞–Ω: {test_frame.shape}")

                cap.release()
                return True
            else:
                print("   ‚ö†Ô∏è  –ö–∞–º–µ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞, –Ω–æ –∫–∞–¥—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω")
                cap.release()
                return False
        else:
            print("   ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ")
            cap.release()
            return False

    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –∫–∞–º–µ—Ä—ã: {e}")
        return False


def check_model_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏"""
    print("\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–∏...")

    import os

    model_files = [
        'bread_detector_edgetpu.tflite',
        'labels.txt',
        'bread_detector.tflite'
    ]

    found_files = []

    for model_file in model_files:
        if os.path.exists(model_file):
            size = os.path.getsize(model_file)
            print(f"   ‚úÖ {model_file} ({size // 1024} KB)")
            found_files.append(model_file)
        else:
            print(f"   ‚ùå {model_file} - –Ω–µ –Ω–∞–π–¥–µ–Ω")

    if not found_files:
        print("\n   üí° –ú–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–ª—è –æ–±—É—á–µ–Ω–∏—è:")
        print("      python training_pipeline.py")
        print("      python video_data_extractor.py --videos-dir /path/to/videos")

    return len(found_files) > 0


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß† –¢–ï–°–¢ CORAL TPU –°–ò–°–¢–ï–ú–´")
    print("=" * 50)

    tests_passed = 0
    total_tests = 6

    # 1. –ë–∞–∑–æ–≤—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    if check_basic_imports():
        tests_passed += 1

    # 2. Coral –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    if check_coral_imports():
        tests_passed += 1

    # 3. TPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    devices = detect_tpu_devices()
    if devices:
        tests_passed += 1

    # 4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å TPU
    if test_tpu_performance():
        tests_passed += 1

    # 5. –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
    if test_system_resources():
        tests_passed += 1

    # 6. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –∫–∞–º–µ—Ä–∞–º–∏
    if test_camera_compatibility():
        tests_passed += 1

    # 7. –§–∞–π–ª—ã –º–æ–¥–µ–ª–µ–π (–±–æ–Ω—É—Å)
    has_models = check_model_files()

    # –ò—Ç–æ–≥–∏
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")

    if tests_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ:")
        if has_models:
            print("   python main_multicamera.py cameras.yaml")
        else:
            print("   1. –ò–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ: python video_data_extractor.py")
            print("   2. –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å: python training_pipeline.py")
            print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∏—Å—Ç–µ–º—É: python main_multicamera.py")

    elif tests_passed >= 4:
        print("‚ö†Ô∏è  –ß–ê–°–¢–ò–ß–ù–û –ì–û–¢–û–í–û")
        print("   –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç")
        if not devices:
            print("   ‚ùó –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞: TPU –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω")
            print("     - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Coral TPU")
            print("     - –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É")
            print("     - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥—Ä–∞–π–≤–µ—Ä—ã: sudo apt install gasket-dkms")

    else:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´")
        print("   –°–∏—Å—Ç–µ–º–∞ –Ω–µ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")

    print("=" * 50)


if __name__ == "__main__":
    main()