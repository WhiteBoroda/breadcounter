import cv2
import time
from datetime import datetime
from config_loader import ConfigLoader


class CameraTestHeadless:
    def __init__(self, config_file='cameras.yaml'):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ YAML
        self.config = ConfigLoader(config_file)
        self.cameras = {cam.oven_id: cam for cam in self.config.get_cameras()}
        self.connections = {}

        print("üìã –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–º–µ—Ä:")
        self.config.print_config_summary()

    def test_camera_connection(self, oven_id, camera_config):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –æ–¥–Ω–æ–π –∫–∞–º–µ—Ä–µ"""
        print(f"üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {camera_config.oven_name} ({camera_config.camera_ip})...")

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ RTSP –ø—É—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –∫–∞–º–µ—Ä—ã
        rtsp_paths = [
            f"rtsp://{camera_config.login}:{camera_config.password}@{camera_config.camera_ip}:554/ch01/0",  # –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
            f"rtsp://{camera_config.login}:{camera_config.password}@{camera_config.camera_ip}:554/ch01/1",  # –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
            f"rtsp://{camera_config.login}:{camera_config.password}@{camera_config.camera_ip}:554/ch01/2",  # –º–æ–±–∏–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫
            f"rtsp://{camera_config.login}:{camera_config.password}@{camera_config.camera_ip}/cam/realmonitor?channel=1&subtype=0",
        ]

        for rtsp_url in rtsp_paths:
            try:
                safe_url = rtsp_url.replace(camera_config.password, '***')
                print(f"   –ü—Ä–æ–±—É–µ–º: {safe_url}")
                cap = cv2.VideoCapture(rtsp_url)
                # cap.set(cv2.CAP_PROP_BUFFER_SIZE, 1)  # –ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ OpenCV

                if cap.isOpened():
                    ret, frame = cap.read()
                    if ret and frame is not None:
                        print(f"   ‚úÖ {camera_config.oven_name}: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ!")
                        print(f"      –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {frame.shape[1]}x{frame.shape[0]}")

                        self.connections[oven_id] = {
                            'cap': cap,
                            'url': rtsp_url,
                            'config': camera_config,
                            'last_frame': frame
                        }
                        return True
                    else:
                        cap.release()
                else:
                    cap.release()

            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
                continue

        print(f"   ‚ùå {camera_config.oven_name}: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")
        return False

    def test_all_cameras(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–º–µ—Ä –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ö–ê–ú–ï–†–ê–ú")
        print("=" * 50)

        success_count = 0

        for oven_id, camera_config in self.cameras.items():
            if self.test_camera_connection(oven_id, camera_config):
                success_count += 1
            print()

        print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {success_count}/{len(self.cameras)} –∫–∞–º–µ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–æ")

        if success_count > 0:
            print("\nüì∏ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–¥—Ä—ã...")
            self.save_test_frames()
            
            print("\nüßÆ –≠–º—É–ª–∏—Ä—É–µ–º –¥–µ—Ç–µ–∫—Ü–∏—é...")
            self.simulate_counting()

        return success_count > 0

    def save_test_frames(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–¥—Ä–æ–≤"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')

        for oven_id, conn in self.connections.items():
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–π –∫–∞–¥—Ä
            ret, frame = conn['cap'].read()
            if ret:
                config = conn['config']
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∫–∞–¥—Ä
                cv2.putText(frame, f"{config.oven_name}",
                            (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                cv2.putText(frame, f"IP: {config.camera_ip}",
                            (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)
                cv2.putText(frame, f"–¶–µ—Ö: {config.workshop_name}",
                            (10, 90), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

                # –†–∏—Å—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–æ–Ω—ã –ø–æ–¥—Å—á–µ—Ç–∞
                h, w = frame.shape[:2]
                line_positions = [int(h * 0.3), int(h * 0.5), int(h * 0.7)]

                for i, y in enumerate(line_positions):
                    color = [(255, 0, 0), (0, 255, 0), (0, 0, 255)][i]
                    cv2.line(frame, (0, y), (w, y), color, 2)
                    cv2.putText(frame, f"Zone {i + 1}", (w - 100, y - 5),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)

                filename = f"test_frame_oven{oven_id}_{timestamp}.jpg"
                cv2.imwrite(filename, frame)
                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–¥—Ä: {filename}")

    def simulate_counting(self):
        """–≠–º—É–ª—è—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞"""
        print("üßÆ –≠–º—É–ª—è—Ü–∏—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ –ø–æ–¥—Å—á–µ—Ç–∞...")

        for oven_id, conn in self.connections.items():
            ret, frame = conn['cap'].read()
            if ret:
                config = conn['config']

                # –ü—Ä–æ—Å—Ç–∞—è —ç–º—É–ª—è—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞
                gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                _, thresh = cv2.threshold(gray, 100, 255, cv2.THRESH_BINARY)
                contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

                bread_objects = 0
                for contour in contours:
                    area = cv2.contourArea(contour)
                    if 5000 < area < 50000:
                        bread_objects += 1

                print(f"   {config.oven_name}: –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ~{bread_objects} –æ–±—ä–µ–∫—Ç–æ–≤")

    def test_stream_quality(self, duration_seconds=10):
        """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–∞"""
        print(f"\nüì° –¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–∞ ({duration_seconds} —Å–µ–∫—É–Ω–¥)...")
        
        for oven_id, conn in self.connections.items():
            config = conn['config']
            cap = conn['cap']
            
            print(f"\nüî• {config.oven_name}:")
            
            frame_count = 0
            start_time = time.time()
            end_time = start_time + duration_seconds
            
            while time.time() < end_time:
                ret, frame = cap.read()
                if ret:
                    frame_count += 1
                time.sleep(0.1)  # 10 FPS —Ç–µ—Å—Ç
            
            actual_duration = time.time() - start_time
            fps = frame_count / actual_duration
            
            print(f"   üìä –ö–∞–¥—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: {frame_count}")
            print(f"   üé¨ FPS: {fps:.1f}")
            print(f"   ‚è±Ô∏è  –í—Ä–µ–º—è: {actual_duration:.1f} —Å–µ–∫")

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        for conn in self.connections.values():
            if 'cap' in conn:
                conn['cap'].release()


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        tester = CameraTestHeadless()
        
        if tester.test_all_cameras():
            print("\n‚úÖ –ö–∞–º–µ—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç! –ú–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É:")
            print("   1. –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö: python training_pipeline.py")
            print("   2. CPU —Å–∏—Å—Ç–µ–º–∞: python main_cpu_test.py")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
            choice = input("\n–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ—Ç–æ–∫–∞? (y/n): ").strip().lower()
            if choice == 'y':
                tester.test_stream_quality()
        else:
            print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –∫–∞–º–µ—Ä–∞–º")
            
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª cameras.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        if 'tester' in locals():
            tester.cleanup()


if __name__ == "__main__":
    main()
