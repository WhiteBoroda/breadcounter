# main_multicamera.py - –ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –º–Ω–æ–≥–æ–∫–∞–º–µ—Ä–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
import sys
import time
import threading
import signal
import logging
from datetime import datetime
from collections import defaultdict

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
from config_loader import ConfigLoader
from models import Base
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
try:
    from coral_detector import CoralBreadDetector

    CORAL_AVAILABLE = True
except ImportError:
    from cpu_detector import CPUBreadDetector

    CORAL_AVAILABLE = False
    print("‚ö†Ô∏è  Coral TPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–µ—Ç–µ–∫—Ü–∏—é")

from bread_tracker import BreadTracker
from production_counter import ProductionCounter
from web_api import start_monitoring_api

import cv2
import queue
import concurrent.futures


class CoralTPUPool:
    """–ü—É–ª Coral TPU —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∫–∞–º–µ—Ä"""

    def __init__(self, num_devices=1, model_path='bread_detector_edgetpu.tflite'):
        self.num_devices = num_devices
        self.model_path = model_path
        self.detectors = []
        self.task_queue = queue.Queue(maxsize=200)
        self.result_queue = queue.Queue(maxsize=1000)
        self.running = False

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤
        self._initialize_detectors()

        # –ü—É–ª –≤–æ—Ä–∫–µ—Ä–æ–≤
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=num_devices)

        logging.info(f"üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω TPU –ø—É–ª —Å {len(self.detectors)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏")

    def _initialize_detectors(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TPU –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤"""
        for i in range(self.num_devices):
            try:
                if CORAL_AVAILABLE:
                    detector = CoralBreadDetector(
                        model_path=self.model_path,
                        labels_path='labels.txt'
                    )
                else:
                    detector = CPUBreadDetector()

                self.detectors.append(detector)
                logging.info(f"‚úÖ TPU –¥–µ—Ç–µ–∫—Ç–æ—Ä {i} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ {i}: {e}")

    def start(self):
        """–ó–∞–ø—É—Å–∫ –ø—É–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        if not self.detectors:
            raise RuntimeError("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤")

        self.running = True

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä—ã
        for i, detector in enumerate(self.detectors):
            self.executor.submit(self._worker_loop, detector, i)

        logging.info("üöÄ TPU –ø—É–ª –∑–∞–ø—É—â–µ–Ω")

    def _worker_loop(self, detector, worker_id):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –≤–æ—Ä–∫–µ—Ä–∞"""
        logging.info(f"üîÑ TPU Worker {worker_id} –∑–∞–ø—É—â–µ–Ω")

        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á—É
                task = self.task_queue.get(timeout=1.0)
                oven_id, timestamp, frame = task

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä
                start_time = time.time()
                detections = detector.detect(frame)
                processing_time = time.time() - start_time

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                result = {
                    'oven_id': oven_id,
                    'timestamp': timestamp,
                    'detections': detections,
                    'processing_time': processing_time,
                    'worker_id': worker_id
                }

                self.result_queue.put(result)
                self.task_queue.task_done()

            except queue.Empty:
                continue
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ TPU Worker {worker_id}: {e}")

    def submit_frame(self, oven_id, timestamp, frame):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–¥—Ä–∞ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É"""
        try:
            self.task_queue.put((oven_id, timestamp, frame), timeout=0.1)
            return True
        except queue.Full:
            logging.warning(f"‚ö†Ô∏è  TPU –æ—á–µ—Ä–µ–¥—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, –∫–∞–¥—Ä —Å –ø–µ—á–∏ {oven_id} –ø—Ä–æ–ø—É—â–µ–Ω")
            return False

    def get_result(self, timeout=0.1):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        try:
            return self.result_queue.get(timeout=timeout)
        except queue.Empty:
            return None

    def get_stats(self):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–ª–∞"""
        return {
            'active_devices': len(self.detectors),
            'queue_size': self.task_queue.qsize(),
            'results_pending': self.result_queue.qsize(),
            'total_capacity': self.task_queue.maxsize
        }

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–ª–∞"""
        self.running = False
        self.executor.shutdown(wait=True)
        logging.info("üõë TPU –ø—É–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


class CameraCapture:
    """–ó–∞—Ö–≤–∞—Ç –∫–∞–¥—Ä–æ–≤ —Å IP –∫–∞–º–µ—Ä—ã"""

    def __init__(self, camera_config):
        self.config = camera_config
        self.cap = None
        self.running = False
        self.last_frame = None
        self.frame_count = 0
        self.fps_counter = 0
        self.last_fps_time = time.time()
        self.current_fps = 0

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–µ"""
        rtsp_paths = [
            f"rtsp://{self.config.login}:{self.config.password}@{self.config.camera_ip}/stream1",
            f"rtsp://{self.config.login}:{self.config.password}@{self.config.camera_ip}/stream0",
            f"rtsp://{self.config.login}:{self.config.password}@{self.config.camera_ip}/live"
        ]

        for rtsp_url in rtsp_paths:
            try:
                self.cap = cv2.VideoCapture(rtsp_url)
                self.cap.set(cv2.CAP_PROP_BUFFER_SIZE, 1)
                self.cap.set(cv2.CAP_PROP_FPS, 15)

                if self.cap.isOpened():
                    ret, frame = self.cap.read()
                    if ret:
                        self.last_frame = frame
                        logging.info(f"‚úÖ –ö–∞–º–µ—Ä–∞ {self.config.oven_name} –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ ({frame.shape[1]}x{frame.shape[0]})")
                        return True

                self.cap.release()

            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.config.oven_name}: {e}")

        return False

    def start_capture(self, tpu_pool):
        """–ó–∞–ø—É—Å–∫ –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤"""
        self.running = True

        def capture_loop():
            while self.running and self.cap:
                ret, frame = self.cap.read()
                if ret:
                    self.last_frame = frame
                    timestamp = time.time()

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–¥—Ä –≤ TPU –ø—É–ª
                    tpu_pool.submit_frame(self.config.oven_id, timestamp, frame)

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    self.frame_count += 1
                    self._update_fps()

                time.sleep(0.067)  # ~15 FPS

        threading.Thread(target=capture_loop, daemon=True).start()
        logging.info(f"üé¨ –ó–∞—Ö–≤–∞—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è {self.config.oven_name}")

    def _update_fps(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS"""
        self.fps_counter += 1
        current_time = time.time()

        if current_time - self.last_fps_time >= 1.0:
            self.current_fps = self.fps_counter
            self.fps_counter = 0
            self.last_fps_time = current_time

    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –∫–∞–º–µ—Ä—ã"""
        self.running = False
        if self.cap:
            self.cap.release()


class MultiCameraSystem:
    """–ì–ª–∞–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–∞–º–µ—Ä–∞–º–∏"""

    def __init__(self, config_file='cameras.yaml'):
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('bread_system.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
        self.logger = logging.getLogger('MultiCameraSystem')

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        self.config = ConfigLoader(config_file)
        self.camera_configs = self.config.get_cameras()
        self.system_settings = self.config.get_system_settings()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.engine = create_engine('sqlite:///bread_production.db')
        Base.metadata.create_all(self.engine)
        Session = sessionmaker(bind=self.engine)
        self.db_session = Session()

        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.tpu_pool = None
        self.cameras = {}
        self.trackers = {}
        self.counters = {}

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = defaultdict(lambda: {
            'frames_processed': 0,
            'detections_count': 0,
            'current_fps': 0,
            'last_activity': 0
        })

        # –§–ª–∞–≥ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.running = False

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self._signal_handler)
        signal.signal(signal.SIGTERM, self._signal_handler)

        self.logger.info(f"üèóÔ∏è  –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è {len(self.camera_configs)} –∫–∞–º–µ—Ä")

    def _signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        self.logger.info(f"üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        self.stop()
        sys.exit(0)

    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("‚öôÔ∏è  –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...")

        # 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TPU –ø—É–ª–∞
        try:
            num_tpu = self.system_settings.get('tpu_devices', 1)
            self.tpu_pool = CoralTPUPool(num_devices=num_tpu)
            self.tpu_pool.start()
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TPU –ø—É–ª–∞: {e}")
            return False

        # 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞–º–µ—Ä
        connected_cameras = 0
        for camera_config in self.camera_configs:
            camera = CameraCapture(camera_config)

            if camera.connect():
                self.cameras[camera_config.oven_id] = camera

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–µ–∫–µ—Ä–∞
                tracker = BreadTracker(camera_config.oven_id)

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–æ–Ω –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞
                if camera.last_frame is not None:
                    h, w = camera.last_frame.shape[:2]
                    tracker.setup_counting_zones(h, w)

                self.trackers[camera_config.oven_id] = tracker

                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                counter = ProductionCounter(self.db_session, camera_config.oven_id)
                self.counters[camera_config.oven_id] = counter

                connected_cameras += 1
                self.logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–µ—á—å {camera_config.oven_id}: {camera_config.oven_name}")
            else:
                self.logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ø–µ—á–∏ {camera_config.oven_id}")

        if connected_cameras == 0:
            self.logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –∫–∞–º–µ—Ä–∞ –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª–∞—Å—å")
            return False

        self.logger.info(f"‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {connected_cameras}/{len(self.camera_configs)} –∫–∞–º–µ—Ä")
        return True

    def start_processing(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –∫–∞–º–µ—Ä"""
        if not self.initialize_components():
            return False

        self.running = True

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞—Ö–≤–∞—Ç —Å –∫–∞–∂–¥–æ–π –∫–∞–º–µ—Ä—ã
        for oven_id, camera in self.cameras.items():
            camera.start_capture(self.tpu_pool)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ TPU
        threading.Thread(target=self._process_tpu_results, daemon=True).start()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        threading.Thread(target=self._stats_monitor, daemon=True).start()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-API
        try:
            api, api_thread = start_monitoring_api(self, host='0.0.0.0', port=5000)
            self.logger.info("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω: http://localhost:5000")
        except Exception as e:
            self.logger.error(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: {e}")

        self.logger.info("üöÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –∫–∞–º–µ—Ä –∑–∞–ø—É—â–µ–Ω–∞")
        return True

    def _process_tpu_results(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—Ç TPU –ø—É–ª–∞"""
        self.logger.info("üîÑ –ó–∞–ø—É—â–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ TPU")

        while self.running:
            result = self.tpu_pool.get_result(timeout=0.1)
            if result:
                oven_id = result['oven_id']
                detections = result['detections']
                timestamp = result['timestamp']

                # –†–∞–∑–¥–µ–ª—è–µ–º –¥–µ—Ç–µ–∫—Ü–∏–∏ –Ω–∞ —Ö–ª–µ–± –∏ –º–∞—Ä–∫–µ—Ä—ã
                bread_detections = [d for d in detections
                                    if d['class_name'] in ['bread', 'loaf']]
                marker_detections = [d for d in detections
                                     if d['class_name'] in ['circle', 'square', 'triangle', 'diamond', 'star']]

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä
                if oven_id in self.trackers:
                    tracked_objects = self.trackers[oven_id].update(bread_detections)

                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—á–µ—Ç—á–∏–∫–æ–º –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
                    if oven_id in self.counters:
                        self.counters[oven_id].process_detections(
                            bread_detections,
                            marker_detections,
                            tracked_objects,
                            timestamp
                        )

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                self.stats[oven_id]['frames_processed'] += 1
                self.stats[oven_id]['detections_count'] += len(bread_detections)
                self.stats[oven_id]['last_activity'] = timestamp

    def _stats_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.running:
            time.sleep(30)  # –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            self._print_system_stats()

    def _print_system_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        try:
            print("\n" + "=" * 80)
            print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–ù–û–ì–û–ö–ê–ú–ï–†–ù–û–ô –°–ò–°–¢–ï–ú–´")
            print(f"üïê {datetime.now().strftime('%H:%M:%S')}")
            print("=" * 80)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TPU
            if self.tpu_pool:
                tpu_stats = self.tpu_pool.get_stats()
                print(f"üß† TPU: {tpu_stats['active_devices']} —É—Å—Ç—Ä–æ–π—Å—Ç–≤, "
                      f"–æ—á–µ—Ä–µ–¥—å: {tpu_stats['queue_size']}/{tpu_stats['total_capacity']}")

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞–∂–¥–æ–π –ø–µ—á–∏
            for oven_id in sorted(self.cameras.keys()):
                camera = self.cameras[oven_id]
                stats = self.stats[oven_id]
                counter = self.counters.get(oven_id)

                print(f"\nüî• {camera.config.oven_name} (ID: {oven_id}):")
                print(f"   üìπ –ö–∞–º–µ—Ä–∞ FPS: {camera.current_fps:2d} | "
                      f"–ö–∞–¥—Ä–æ–≤: {camera.frame_count:5d} | "
                      f"–î–µ—Ç–µ–∫—Ü–∏–π: {stats['detections_count']:4d}")

                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏
                if counter:
                    batch_info = counter.get_current_batch_info()
                    if batch_info:
                        print(f"   ü•ñ –ü–∞—Ä—Ç–∏—è: {batch_info['product_name']} - "
                              f"{batch_info['total_count']} —à—Ç "
                              f"(–±—Ä–∞–∫: {batch_info['defect_count']}) "
                              f"[{batch_info['duration_minutes']} –º–∏–Ω]")
                    else:
                        print(f"   ‚è∏Ô∏è  –ü–∞—Ä—Ç–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")

                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–µ–∫–µ—Ä–∞
                if oven_id in self.trackers:
                    track_stats = self.trackers[oven_id].get_count_stats()
                    print(f"   üéØ –¢—Ä–µ–∫–∏–Ω–≥: {track_stats.get('active_objects', 0)} –æ–±—ä–µ–∫—Ç–æ–≤, "
                          f"–ø–æ–¥—Å—á–µ—Ç: {track_stats.get('total', 0)}")

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                if stats['last_activity'] > 0:
                    inactive_time = time.time() - stats['last_activity']
                    if inactive_time > 60:
                        print(f"   ‚ö†Ô∏è  –ù–µ–∞–∫—Ç–∏–≤–Ω–∞ {inactive_time / 60:.1f} –º–∏–Ω")

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def get_system_overview(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ —Å–∏—Å—Ç–µ–º—ã –¥–ª—è API"""
        active_cameras = sum(1 for stats in self.stats.values()
                             if time.time() - stats.get('last_activity', 0) < 60)

        active_batches = sum(1 for counter in self.counters.values()
                             if counter.current_batch is not None)

        total_processed = sum(stats['frames_processed'] for stats in self.stats.values())
        total_detections = sum(stats['detections_count'] for stats in self.stats.values())

        return {
            'total_cameras': len(self.cameras),
            'active_cameras': active_cameras,
            'active_batches': active_batches,
            'total_frames_processed': total_processed,
            'total_detections': total_detections,
            'tpu_stats': self.tpu_pool.get_stats() if self.tpu_pool else {}
        }

    def get_oven_status(self, oven_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–µ—á–∏"""
        if oven_id not in self.cameras:
            return {'error': 'Oven not found'}

        camera = self.cameras[oven_id]
        stats = self.stats[oven_id]
        counter = self.counters.get(oven_id)
        tracker = self.trackers.get(oven_id)

        status = {
            'oven_id': oven_id,
            'oven_name': camera.config.oven_name,
            'fps': camera.current_fps,
            'frames_processed': stats['frames_processed'],
            'detections_count': stats['detections_count'],
            'last_activity': stats['last_activity'],
            'tracked_objects': len(tracker.objects) if tracker else 0
        }

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏
        if counter:
            batch_info = counter.get_current_batch_info()
            if batch_info:
                status['current_batch'] = batch_info

        return status

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        self.logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")

        self.running = False

        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏
        for counter in self.counters.values():
            if counter.current_batch:
                counter.force_finish_batch("System shutdown")

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–º–µ—Ä—ã
        for camera in self.cameras.values():
            camera.disconnect()

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º TPU –ø—É–ª
        if self.tpu_pool:
            self.tpu_pool.stop()

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –ë–î
        self.db_session.close()

        self.logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

    def run(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        if not self.start_processing():
            self.logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É")
            return False

        try:
            self.logger.info("üéØ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")

            # –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª - –ø—Ä–æ—Å—Ç–æ –∂–¥–µ–º
            while self.running:
                time.sleep(1)

        except KeyboardInterrupt:
            self.logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        finally:
            self.stop()

        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü•ñ –ú–ù–û–ì–û–ö–ê–ú–ï–†–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–û–î–°–ß–ï–¢–ê –•–õ–ï–ë–ê")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    config_file = 'cameras.yaml'
    if len(sys.argv) > 1:
        config_file = sys.argv[1]

    print(f"üìÅ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_file}")

    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        system = MultiCameraSystem(config_file)

        print(f"üè≠ –ù–∞–π–¥–µ–Ω–æ {len(system.camera_configs)} –∫–∞–º–µ—Ä –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        for cam in system.camera_configs:
            print(f"   üî• {cam.oven_name} ({cam.camera_ip})")

        print("\nüöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã...")
        success = system.run()

        if success:
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            print("‚ùå –°–∏—Å—Ç–µ–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
            sys.exit(1)

    except FileNotFoundError:
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_file}")
        print("   –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª cameras.yaml –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == "__main__":
    main()