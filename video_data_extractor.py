# video_data_extractor.py - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤ –∏–∑ MP4 –∑–∞–ø–∏—Å–µ–π
import cv2
import os
import time
import json
from datetime import datetime
from pathlib import Path


class VideoDataExtractor:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö –∫–∞–¥—Ä–æ–≤ –∏–∑ MP4 –∑–∞–ø–∏—Å–µ–π"""

    def __init__(self, output_dir='training_data'):
        self.output_dir = output_dir
        self.setup_directories()

    def setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
        dirs = [
            f'{self.output_dir}/images',
            f'{self.output_dir}/annotations',
            f'{self.output_dir}/metadata'
        ]

        for dir_path in dirs:
            os.makedirs(dir_path, exist_ok=True)

        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –≤ {self.output_dir}")

    def extract_frames_from_video(self, video_path, oven_id=1, frame_interval=30, max_frames=1000):
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤ –∏–∑ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞

        Args:
            video_path: –ø—É—Ç—å –∫ MP4 —Ñ–∞–π–ª—É
            oven_id: ID –ø–µ—á–∏ –¥–ª—è –∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
            frame_interval: –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ (–∫–∞–∂–¥—ã–π N-–π –∫–∞–¥—Ä)
            max_frames: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤
        """
        if not os.path.exists(video_path):
            print(f"‚ùå –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            return False

        print(f"üé¨ –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–¥—Ä—ã –∏–∑ {video_path}")
        print(f"   üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: –∫–∞–∂–¥—ã–π {frame_interval}-–π –∫–∞–¥—Ä, –º–∞–∫—Å {max_frames} –∫–∞–¥—Ä–æ–≤")

        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {video_path}")
            return False

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏–¥–µ–æ
        total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        fps = cap.get(cv2.CAP_PROP_FPS)
        duration = total_frames / fps if fps > 0 else 0

        print(f"   üìä –í–∏–¥–µ–æ: {total_frames} –∫–∞–¥—Ä–æ–≤, {fps:.1f} FPS, {duration / 60:.1f} –º–∏–Ω")

        frame_count = 0
        extracted_count = 0
        video_name = Path(video_path).stem

        try:
            while extracted_count < max_frames:
                ret, frame = cap.read()
                if not ret:
                    break

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞–∂–¥—ã–π N-–π –∫–∞–¥—Ä
                if frame_count % frame_interval == 0:
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')[:-3]
                    filename = f"video_{video_name}_oven{oven_id}_{extracted_count:04d}_{timestamp}.jpg"
                    filepath = os.path.join(self.output_dir, 'images', filename)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä
                    cv2.imwrite(filepath, frame)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    self._save_frame_metadata(
                        filename, oven_id, video_path,
                        frame_count, total_frames, fps, frame.shape
                    )

                    extracted_count += 1

                    if extracted_count % 50 == 0:
                        progress = (frame_count / total_frames) * 100
                        print(f"   üì∏ –ò–∑–≤–ª–µ—á–µ–Ω–æ {extracted_count} –∫–∞–¥—Ä–æ–≤ ({progress:.1f}%)")

                frame_count += 1

        except KeyboardInterrupt:
            print("üõë –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        finally:
            cap.release()

        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {extracted_count} –∫–∞–¥—Ä–æ–≤ –∏–∑ {video_path}")
        return True

    def batch_extract_from_directory(self, videos_dir, frame_interval=30, max_frames_per_video=500):
        """
        –ü–∞–∫–µ—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –≤—Å–µ—Ö MP4 —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ

        Args:
            videos_dir: –ø–∞–ø–∫–∞ —Å MP4 —Ñ–∞–π–ª–∞–º–∏
            frame_interval: –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
            max_frames_per_video: –º–∞–∫—Å–∏–º—É–º –∫–∞–¥—Ä–æ–≤ —Å –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
        """
        if not os.path.exists(videos_dir):
            print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {videos_dir}")
            return

        # –ò—â–µ–º –≤—Å–µ MP4 —Ñ–∞–π–ª—ã
        video_files = []
        for ext in ['*.mp4', '*.MP4', '*.avi', '*.AVI', '*.mov', '*.MOV']:
            video_files.extend(Path(videos_dir).glob(ext))

        if not video_files:
            print(f"‚ùå MP4 —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {videos_dir}")
            return

        print(f"üé¨ –ù–∞–π–¥–µ–Ω–æ {len(video_files)} –≤–∏–¥–µ–æ—Ñ–∞–π–ª–æ–≤")

        total_extracted = 0
        for i, video_path in enumerate(video_files, 1):
            print(f"\nüìπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–π–ª {i}/{len(video_files)}: {video_path.name}")

            # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å oven_id –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            oven_id = self._extract_oven_id_from_filename(video_path.name)

            if self.extract_frames_from_video(str(video_path), oven_id, frame_interval, max_frames_per_video):
                total_extracted += max_frames_per_video

        print(f"\nüéâ –ü–∞–∫–µ—Ç–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ: {len(video_files)}")
        print(f"üì∏ –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –∫–∞–¥—Ä–æ–≤: ~{total_extracted}")

        self._generate_extraction_report()

    def extract_diverse_frames(self, video_path, oven_id=1, num_frames=200):
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π –≤–∏–¥–µ–æ

        Args:
            video_path: –ø—É—Ç—å –∫ –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É
            oven_id: ID –ø–µ—á–∏
            num_frames: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        """
        if not os.path.exists(video_path):
            print(f"‚ùå –í–∏–¥–µ–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
            return False

        print(f"üé≤ –ò–∑–≤–ª–µ–∫–∞–µ–º {num_frames} —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤ –∏–∑ {video_path}")

        cap = cv2.VideoCapture(video_path)
        if not cap.isOpened():
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {video_path}")
            return False

        total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        if total_frames < num_frames:
            frame_positions = list(range(0, total_frames, max(1, total_frames // num_frames)))
        else:
            step = total_frames // num_frames
            frame_positions = list(range(0, total_frames, step))[:num_frames]

        print(f"   üìä –í–∏–¥–µ–æ: {total_frames} –∫–∞–¥—Ä–æ–≤, –∏–∑–≤–ª–µ–∫–∞–µ–º –∏–∑ –ø–æ–∑–∏—Ü–∏–π: {frame_positions[:5]}...")

        extracted_count = 0
        video_name = Path(video_path).stem

        for i, frame_pos in enumerate(frame_positions):
            cap.set(cv2.CAP_PROP_POS_FRAMES, frame_pos)
            ret, frame = cap.read()

            if ret:
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')[:-3]
                filename = f"diverse_{video_name}_oven{oven_id}_{i:04d}_{timestamp}.jpg"
                filepath = os.path.join(self.output_dir, 'images', filename)

                cv2.imwrite(filepath, frame)

                # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                self._save_frame_metadata(
                    filename, oven_id, video_path,
                    frame_pos, total_frames, cap.get(cv2.CAP_PROP_FPS), frame.shape
                )

                extracted_count += 1

                if extracted_count % 50 == 0:
                    progress = (i / len(frame_positions)) * 100
                    print(f"   üì∏ –ò–∑–≤–ª–µ—á–µ–Ω–æ {extracted_count}/{num_frames} –∫–∞–¥—Ä–æ–≤ ({progress:.1f}%)")

        cap.release()
        print(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {extracted_count} —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤")
        return True

    def _extract_oven_id_from_filename(self, filename):
        """–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å ID –ø–µ—á–∏ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ç–∏–ø–∞ "oven1", "–ø–µ—á—å_2", "ch01" –∏ —Ç.–¥.
        import re

        patterns = [
            r'oven[_-]?(\d+)',
            r'–ø–µ—á—å[_-]?(\d+)',
            r'ch(\d+)',
            r'camera[_-]?(\d+)',
            r'cam(\d+)'
        ]

        filename_lower = filename.lower()

        for pattern in patterns:
            match = re.search(pattern, filename_lower)
            if match:
                return int(match.group(1))

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 1 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 1

    def _save_frame_metadata(self, filename, oven_id, video_path, frame_number, total_frames, fps, frame_shape):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–∞"""
        metadata = {
            'filename': filename,
            'source_video': str(video_path),
            'oven_id': oven_id,
            'frame_number': frame_number,
            'total_frames': total_frames,
            'video_fps': fps,
            'timestamp': datetime.now().isoformat(),
            'resolution': {
                'width': frame_shape[1],
                'height': frame_shape[0],
                'channels': frame_shape[2]
            },
            'video_progress': frame_number / total_frames if total_frames > 0 else 0
        }

        metadata_file = os.path.join(self.output_dir, 'metadata',
                                     filename.replace('.jpg', '_metadata.json'))

        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)

    def _generate_extraction_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ–± –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
        images_dir = os.path.join(self.output_dir, 'images')
        image_files = [f for f in os.listdir(images_dir) if f.endswith('.jpg')]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
        source_stats = {}
        oven_stats = {}

        metadata_dir = os.path.join(self.output_dir, 'metadata')
        if os.path.exists(metadata_dir):
            for metadata_file in os.listdir(metadata_dir):
                if metadata_file.endswith('_metadata.json'):
                    try:
                        with open(os.path.join(metadata_dir, metadata_file), 'r', encoding='utf-8') as f:
                            metadata = json.load(f)

                        source = Path(metadata['source_video']).name
                        oven_id = metadata['oven_id']

                        source_stats[source] = source_stats.get(source, 0) + 1
                        oven_stats[oven_id] = oven_stats.get(oven_id, 0) + 1

                    except Exception as e:
                        print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö {metadata_file}: {e}")

        report = {
            'extraction_date': datetime.now().isoformat(),
            'total_extracted_frames': len(image_files),
            'frames_by_source_video': source_stats,
            'frames_by_oven': oven_stats,
            'output_directory': self.output_dir
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = os.path.join(self.output_dir, 'extraction_report.json')
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print("\nüìä –û–¢–ß–ï–¢ –û–ë –ò–ó–í–õ–ï–ß–ï–ù–ò–ò –î–ê–ù–ù–´–•")
        print("=" * 40)
        print(f"üñºÔ∏è  –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: {len(image_files)}")

        if source_stats:
            print("\nüìπ –ü–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º:")
            for source, count in sorted(source_stats.items()):
                print(f"   {source}: {count} –∫–∞–¥—Ä–æ–≤")

        if oven_stats:
            print("\nüî• –ü–æ –ø–µ—á–∞–º:")
            for oven_id, count in sorted(oven_stats.items()):
                print(f"   –ü–µ—á—å {oven_id}: {count} –∫–∞–¥—Ä–æ–≤")

        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        print("=" * 40)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"""
    import argparse

    parser = argparse.ArgumentParser(description='–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–∞–¥—Ä–æ–≤ –∏–∑ MP4 –∑–∞–ø–∏—Å–µ–π')
    parser.add_argument('--video', help='–ü—É—Ç—å –∫ –æ–¥–Ω–æ–º—É –≤–∏–¥–µ–æ—Ñ–∞–π–ª—É')
    parser.add_argument('--videos-dir', help='–ü–∞–ø–∫–∞ —Å –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞–º–∏')
    parser.add_argument('--output', default='training_data', help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
    parser.add_argument('--interval', type=int, default=30, help='–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏')
    parser.add_argument('--max-frames', type=int, default=500, help='–ú–∞–∫—Å–∏–º—É–º –∫–∞–¥—Ä–æ–≤ —Å –≤–∏–¥–µ–æ')
    parser.add_argument('--diverse', action='store_true', help='–ò–∑–≤–ª–µ–∫–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∫–∞–¥—Ä—ã')

    args = parser.parse_args()

    print("üé¨ –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó MP4 –ó–ê–ü–ò–°–ï–ô")
    print("=" * 50)

    try:
        extractor = VideoDataExtractor(args.output)

        if args.video:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            if args.diverse:
                extractor.extract_diverse_frames(args.video, num_frames=args.max_frames)
            else:
                extractor.extract_frames_from_video(args.video, frame_interval=args.interval,
                                                    max_frames=args.max_frames)

        elif args.videos_dir:
            # –ü–∞–∫–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            extractor.batch_extract_from_directory(args.videos_dir, args.interval, args.max_frames)

        else:
            print("‚ùå –£–∫–∞–∂–∏—Ç–µ --video –∏–ª–∏ --videos-dir")
            print("\n–ü—Ä–∏–º–µ—Ä—ã:")
            print("  python video_data_extractor.py --video /path/to/video.mp4")
            print("  python video_data_extractor.py --videos-dir /path/to/videos/")
            print("  python video_data_extractor.py --videos-dir ./videos --diverse --max-frames 200")

    except KeyboardInterrupt:
        print("\nüõë –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()