import cv2
import os
import time
from datetime import datetime
import json
import threading


class DataCollector:
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""

    def __init__(self, output_dir='training_data'):
        self.output_dir = output_dir
        self.cameras = {}
        self.collecting = False

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        self.setup_directories()

    def setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
        dirs = [
            f'{self.output_dir}/images',
            f'{self.output_dir}/annotations',
            f'{self.output_dir}/videos',
            f'{self.output_dir}/test_images'
        ]

        for dir_path in dirs:
            os.makedirs(dir_path, exist_ok=True)

    def add_camera(self, oven_id, camera_ip, login, password):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö"""
        rtsp_url = f"rtsp://{login}:{password}@{camera_ip}/stream1"
        cap = cv2.VideoCapture(rtsp_url)

        if cap.isOpened():
            self.cameras[oven_id] = {
                'capture': cap,
                'camera_ip': camera_ip,
                'last_save': 0
            }
            print(f"‚úÖ –ö–∞–º–µ—Ä–∞ –ø–µ—á–∏ {oven_id} –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
            return True
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–µ –ø–µ—á–∏ {oven_id}")
            return False

    def collect_training_data(self, duration_minutes=30, save_interval=5):
        """–°–±–æ—Ä –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç")
        print(f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {save_interval} —Å–µ–∫—É–Ω–¥")

        self.collecting = True
        start_time = time.time()
        end_time = start_time + (duration_minutes * 60)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–µ—Ä—ã
        threads = []
        for oven_id in self.cameras.keys():
            thread = threading.Thread(
                target=self._collect_from_camera,
                args=(oven_id, save_interval, end_time),
                daemon=True
            )
            threads.append(thread)
            thread.start()

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while time.time() < end_time and self.collecting:
                remaining = int((end_time - time.time()) / 60)
                print(f"‚è±Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {remaining} –º–∏–Ω—É—Ç...")
                time.sleep(60)
        except KeyboardInterrupt:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")

        self.collecting = False

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()

        print("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")
        self._generate_collection_report()

    def _collect_from_camera(self, oven_id, save_interval, end_time):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
        camera_info = self.cameras[oven_id]
        cap = camera_info['capture']

        while self.collecting and time.time() < end_time:
            ret, frame = cap.read()
            if ret:
                current_time = time.time()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if current_time - camera_info['last_save'] >= save_interval:
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                    filename = f"oven_{oven_id}_{timestamp}.jpg"
                    filepath = os.path.join(self.output_dir, 'images', filename)

                    cv2.imwrite(filepath, frame)
                    camera_info['last_save'] = current_time

                    print(f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–¥—Ä: {filename}")

            time.sleep(0.1)

    def collect_marker_samples(self):
        """–°–±–æ—Ä –æ–±—Ä–∞–∑—Ü–æ–≤ –º–∞—Ä–∫–µ—Ä–æ–≤ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"""
        print("üéØ –†–µ–∂–∏–º —Å–±–æ—Ä–∞ –º–∞—Ä–∫–µ—Ä–æ–≤")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –º–∞—Ä–∫–µ—Ä—ã –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–∞–º–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ:")
        print("  [c] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—Ä—É–≥")
        print("  [s] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–≤–∞–¥—Ä–∞—Ç")
        print("  [t] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫")
        print("  [q] - –≤—ã—Ö–æ–¥")

        marker_counts = {'circle': 0, 'square': 0, 'triangle': 0}

        while True:
            for oven_id, camera_info in self.cameras.items():
                ret, frame = camera_info['capture'].read()
                if ret:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–¥—Ä
                    cv2.putText(frame, f"Oven {oven_id}", (10, 30),
                                cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                    cv2.imshow(f'Oven {oven_id}', frame)

            key = cv2.waitKey(1) & 0xFF

            if key == ord('c'):  # –ö—Ä—É–≥
                self._save_marker_sample('circle', marker_counts)
            elif key == ord('s'):  # –ö–≤–∞–¥—Ä–∞—Ç
                self._save_marker_sample('square', marker_counts)
            elif key == ord('t'):  # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                self._save_marker_sample('triangle', marker_counts)
            elif key == ord('q'):  # –í—ã—Ö–æ–¥
                break

        cv2.destroyAllWindows()
        print(f"üéØ –°–æ–±—Ä–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤: {marker_counts}")

    def _save_marker_sample(self, marker_type, counts):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –º–∞—Ä–∫–µ—Ä–∞"""
        for oven_id, camera_info in self.cameras.items():
            ret, frame = camera_info['capture'].read()
            if ret:
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                filename = f"marker_{marker_type}_{oven_id}_{timestamp}.jpg"
                filepath = os.path.join(self.output_dir, 'images', filename)

                cv2.imwrite(filepath, frame)
                counts[marker_type] += 1

                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –º–∞—Ä–∫–µ—Ä {marker_type}: {filename}")

    def _generate_collection_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        images_dir = os.path.join(self.output_dir, 'images')
        image_files = [f for f in os.listdir(images_dir) if f.endswith('.jpg')]

        report = {
            'total_images': len(image_files),
            'collection_date': datetime.now().isoformat(),
            'cameras': list(self.cameras.keys())
        }

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–µ—á–∞–º
        oven_counts = {}
        for filename in image_files:
            if filename.startswith('oven_'):
                oven_id = filename.split('_')[1]
                oven_counts[oven_id] = oven_counts.get(oven_id, 0) + 1

        report['images_per_oven'] = oven_counts

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = os.path.join(self.output_dir, 'collection_report.json')
        with open(report_path, 'w') as f:
            json.dump(report, f, indent=2)

        print(f"üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        print(f"üñºÔ∏è  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")