# config_loader.py - –ï–¥–∏–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
import yaml
import os
from dataclasses import dataclass
from typing import List, Dict, Any


@dataclass
class CameraConfig:
    oven_id: int
    camera_ip: str
    login: str
    password: str
    oven_name: str
    workshop_name: str
    enterprise_name: str


class ConfigLoader:
    """–ï–¥–∏–Ω—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ YAML"""

    def __init__(self, config_file='cameras.yaml'):
        self.config_file = config_file
        self._config_data = None
        self.load_config()

    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.config_file):
            raise FileNotFoundError(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")

        with open(self.config_file, 'r', encoding='utf-8') as f:
            self._config_data = yaml.safe_load(f)

        print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {self.config_file}")

    def get_cameras(self) -> List[CameraConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–º–µ—Ä"""
        cameras = []

        for cam_data in self._config_data.get('cameras', []):
            camera = CameraConfig(
                oven_id=cam_data['oven_id'],
                camera_ip=cam_data['camera_ip'],
                login=cam_data['login'],
                password=cam_data['password'],
                oven_name=cam_data['oven_name'],
                workshop_name=cam_data['workshop_name'],
                enterprise_name=cam_data['enterprise_name']
            )
            cameras.append(camera)

        return cameras

    def get_system_settings(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        return self._config_data.get('system', {
            'tpu_devices': 1,
            'frame_rate': 15,
            'detection_threshold': 0.5,
            'tracking_max_distance': 100
        })

    def get_classes(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏"""
        return self._config_data.get('classes', [
            {'name': 'bread', 'color': [0, 255, 0]},
            {'name': 'circle', 'color': [255, 0, 0]},
            {'name': 'square', 'color': [0, 0, 255]},
            {'name': 'triangle', 'color': [255, 255, 0]},
            {'name': 'defective_bread', 'color': [0, 128, 255]}
        ])

    def get_camera_by_oven_id(self, oven_id: int) -> CameraConfig:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã –ø–æ ID –ø–µ—á–∏"""
        cameras = self.get_cameras()
        for camera in cameras:
            if camera.oven_id == oven_id:
                return camera
        raise ValueError(f"–ö–∞–º–µ—Ä–∞ —Å oven_id={oven_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    def print_config_summary(self):
        """–í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        cameras = self.get_cameras()
        print("\nüìã –°–í–û–î–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò")
        print("=" * 50)

        for camera in cameras:
            print(f"üî• {camera.oven_name}")
            print(f"   üìπ IP: {camera.camera_ip}")
            print(f"   üè≠ –¶–µ—Ö: {camera.workshop_name}")
            print(f"   üè¢ –ü—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ: {camera.enterprise_name}")
            print()
