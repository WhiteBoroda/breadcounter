# smart_batch_detector.py - –£–º–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–º–µ–Ω—ã –ø–∞—Ä—Ç–∏–π –±–µ–∑ –º–∞—Ä–∫–µ—Ä–æ–≤
import cv2
import numpy as np
import time
from collections import deque
from dataclasses import dataclass
from typing import List, Optional, Dict, Any
import logging


@dataclass
class BreadCharacteristics:
    """–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ö–ª–µ–±–æ–±—É–ª–æ—á–Ω–æ–≥–æ –∏–∑–¥–µ–ª–∏—è"""
    avg_color: tuple  # –°—Ä–µ–¥–Ω–∏–π —Ü–≤–µ—Ç (BGR)
    avg_size: float  # –°—Ä–µ–¥–Ω—è—è –ø–ª–æ—â–∞–¥—å
    aspect_ratio: float  # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
    shape_complexity: float  # –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
    texture_variance: float  # –í–∞—Ä–∏–∞—Ü–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã


class BreadTypeClassifier:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç–∏–ø–æ–≤ —Ö–ª–µ–±–∞ –ø–æ –≤–∏–∑—É–∞–ª—å–Ω—ã–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º"""

    def __init__(self):
        # –≠—Ç–∞–ª–æ–Ω–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–∏–ø–æ–≤ —Ö–ª–µ–±–∞
        self.bread_types = {
            'white_bread': {
                'color_range': [(180, 150, 120), (220, 200, 170)],  # –°–≤–µ—Ç–ª—ã–π
                'size_range': (8000, 15000),
                'aspect_ratio_range': (0.7, 1.3),
                'name': '–ë–µ–ª—ã–π —Ö–ª–µ–±'
            },
            'dark_bread': {
                'color_range': [(80, 60, 40), (140, 100, 80)],  # –¢–µ–º–Ω—ã–π
                'size_range': (8000, 15000),
                'aspect_ratio_range': (0.7, 1.3),
                'name': '–ß–µ—Ä–Ω—ã–π —Ö–ª–µ–±'
            },
            'baton': {
                'color_range': [(160, 130, 100), (200, 170, 140)],  # –ó–æ–ª–æ—Ç–∏—Å—Ç—ã–π
                'size_range': (12000, 25000),
                'aspect_ratio_range': (1.5, 3.0),  # –ü—Ä–æ–¥–æ–ª–≥–æ–≤–∞—Ç—ã–π
                'name': '–ë–∞—Ç–æ–Ω'
            },
            'rolls': {
                'color_range': [(170, 140, 110), (210, 180, 150)],  # –†—É–º—è–Ω—ã–π
                'size_range': (3000, 8000),  # –ú–∞–ª–µ–Ω—å–∫–∏–µ
                'aspect_ratio_range': (0.8, 1.2),
                'name': '–ë—É–ª–æ—á–∫–∏'
            }
        }

        self.logger = logging.getLogger('BreadTypeClassifier')

    def extract_characteristics(self, frame, bbox) -> BreadCharacteristics:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Ö–ª–µ–±–∞ –∏–∑ –æ–±–ª–∞—Å—Ç–∏"""
        x1, y1, x2, y2 = bbox
        roi = frame[y1:y2, x1:x2]

        if roi.size == 0:
            return BreadCharacteristics((0, 0, 0), 0, 1.0, 0, 0)

        # –°—Ä–µ–¥–Ω–∏–π —Ü–≤–µ—Ç
        avg_color = tuple(np.mean(roi, axis=(0, 1)).astype(int))

        # –†–∞–∑–º–µ—Ä
        area = (x2 - x1) * (y2 - y1)

        # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
        width = x2 - x1
        height = y2 - y1
        aspect_ratio = width / height if height > 0 else 1.0

        # –°–ª–æ–∂–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
        gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
        contours, _ = cv2.findContours(gray, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
        shape_complexity = len(contours[0]) if contours else 0

        # –í–∞—Ä–∏–∞—Ü–∏—è —Ç–µ–∫—Å—Ç—É—Ä—ã
        texture_variance = np.var(gray) if gray.size > 0 else 0

        return BreadCharacteristics(
            avg_color=avg_color,
            avg_size=area,
            aspect_ratio=aspect_ratio,
            shape_complexity=shape_complexity,
            texture_variance=texture_variance
        )

    def classify_bread_type(self, characteristics: BreadCharacteristics) -> str:
        """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–∏–ø–∞ —Ö–ª–µ–±–∞ –ø–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º"""
        best_match = 'unknown'
        best_score = 0

        for bread_type, params in self.bread_types.items():
            score = 0

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–≤–µ—Ç–∞
            color_min, color_max = params['color_range']
            if (color_min[0] <= characteristics.avg_color[0] <= color_max[0] and
                    color_min[1] <= characteristics.avg_color[1] <= color_max[1] and
                    color_min[2] <= characteristics.avg_color[2] <= color_max[2]):
                score += 3

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞
            size_min, size_max = params['size_range']
            if size_min <= characteristics.avg_size <= size_max:
                score += 2

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
            ratio_min, ratio_max = params['aspect_ratio_range']
            if ratio_min <= characteristics.aspect_ratio <= ratio_max:
                score += 2

            if score > best_score:
                best_score = score
                best_match = bread_type

        return best_match if best_score >= 4 else 'unknown'

    def get_bread_name(self, bread_type: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∏–ø–∞ —Ö–ª–µ–±–∞"""
        return self.bread_types.get(bread_type, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')


class GapDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –ø—Ä–æ–ø—É—Å–∫–æ–≤ –º–µ–∂–¥—É –ø–∞—Ä—Ç–∏—è–º–∏"""

    def __init__(self, min_gap_rows=2, max_gap_rows=50):
        self.min_gap_rows = min_gap_rows
        self.max_gap_rows = max_gap_rows
        self.gap_history = deque(maxlen=100)
        self.logger = logging.getLogger('GapDetector')

    def detect_gap(self, detections, frame_height) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–µ—Ç–µ–∫—Ü–∏–π

        Args:
            detections: —Å–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–∫—Ü–∏–π —Ö–ª–µ–±–∞
            frame_height: –≤—ã—Å–æ—Ç–∞ –∫–∞–¥—Ä–∞

        Returns:
            True –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ–ø—É—Å–∫
        """
        if not detections:
            self.gap_history.append(True)
        else:
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –≤—ã—Å–æ—Ç–µ
            y_positions = [d['center'][1] for d in detections]

            if len(y_positions) < 2:
                self.gap_history.append(False)
                return False

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ Y –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–µ
            y_positions.sort()

            # –ò—â–µ–º –±–æ–ª—å—à–∏–µ –ø—Ä–æ–ø—É—Å–∫–∏ –º–µ–∂–¥—É –æ–±—ä–µ–∫—Ç–∞–º–∏
            gaps = []
            for i in range(1, len(y_positions)):
                gap = y_positions[i] - y_positions[i - 1]
                gaps.append(gap)

            # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–ø—É—Å–∫–æ–≤
            if gaps:
                max_gap = max(gaps)
                avg_object_height = frame_height * 0.05  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –æ–±—ä–µ–∫—Ç–∞

                # –ü—Ä–æ–ø—É—Å–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º –µ—Å–ª–∏ –±–æ–ª—å—à–µ N —Ä—è–¥–æ–≤
                gap_in_rows = max_gap / avg_object_height

                is_gap = gap_in_rows >= self.min_gap_rows
                self.gap_history.append(is_gap)

                if is_gap:
                    self.logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä–æ–ø—É—Å–∫: {gap_in_rows:.1f} —Ä—è–¥–æ–≤")

                return is_gap

        self.gap_history.append(False)
        return False

    def is_sustained_gap(self, min_duration_frames=10) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–æ–π—á–∏–≤—ã–π –ø—Ä–æ–ø—É—Å–∫"""
        if len(self.gap_history) < min_duration_frames:
            return False

        recent_gaps = list(self.gap_history)[-min_duration_frames:]
        return sum(recent_gaps) >= min_duration_frames * 0.7  # 70% –∫–∞–¥—Ä–æ–≤ —Å –ø—Ä–æ–ø—É—Å–∫–æ–º


class SmartBatchDetector:
    """–£–º–Ω—ã–π –¥–µ—Ç–µ–∫—Ç–æ—Ä —Å–º–µ–Ω—ã –ø–∞—Ä—Ç–∏–π"""

    def __init__(self, oven_id: int):
        self.oven_id = oven_id
        self.gap_detector = GapDetector()
        self.bread_classifier = BreadTypeClassifier()

        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏
        self.current_batch_type = None
        self.current_batch_characteristics = None
        self.batch_start_time = None

        # –ò—Å—Ç–æ—Ä–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π
        self.recent_detections = deque(maxlen=50)
        self.type_history = deque(maxlen=20)

        # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.in_gap = False
        self.gap_start_time = None
        self.waiting_for_new_batch = False

        self.logger = logging.getLogger(f'SmartBatchDetector_Oven_{oven_id}')

    def process_frame(self, detections, frame, timestamp) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–º–µ–Ω—ã –ø–∞—Ä—Ç–∏–π

        Returns:
            Dict —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–∞—Ä—Ç–∏–∏
        """
        frame_height = frame.shape[0]

        # 1. –î–µ—Ç–µ–∫—Ü–∏—è –ø—Ä–æ–ø—É—Å–∫–∞
        current_gap = self.gap_detector.detect_gap(detections, frame_height)

        # 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        if current_gap and not self.in_gap:
            # –ù–∞—á–∞–ª–æ –ø—Ä–æ–ø—É—Å–∫–∞
            self.in_gap = True
            self.gap_start_time = timestamp
            self.waiting_for_new_batch = True
            self.logger.info("üîÑ –ù–∞—á–∞—Ç –ø—Ä–æ–ø—É—Å–∫ - –æ–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏")

        elif not current_gap and self.in_gap:
            # –ö–æ–Ω–µ—Ü –ø—Ä–æ–ø—É—Å–∫–∞
            gap_duration = timestamp - self.gap_start_time if self.gap_start_time else 0
            self.in_gap = False
            self.logger.info(f"‚úÖ –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {gap_duration:.1f}—Å)")

        # 3. –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ —Ö–ª–µ–±–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–ø—É—Å–∫–∞
        if self.waiting_for_new_batch and not current_gap and detections:
            new_batch_type = self._analyze_new_batch(detections, frame)

            if new_batch_type != self.current_batch_type:
                # –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–º–µ–Ω–∞ –ø–∞—Ä—Ç–∏–∏
                self._start_new_batch(new_batch_type, timestamp)

        # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
        self.recent_detections.append({
            'timestamp': timestamp,
            'detections': detections,
            'gap': current_gap
        })

        return {
            'batch_type': self.current_batch_type,
            'batch_name': self.bread_classifier.get_bread_name(self.current_batch_type or 'unknown'),
            'in_gap': self.in_gap,
            'waiting_for_new_batch': self.waiting_for_new_batch,
            'batch_start_time': self.batch_start_time,
            'gap_duration': timestamp - self.gap_start_time if self.gap_start_time else 0
        }

    def _analyze_new_batch(self, detections, frame) -> Optional[str]:
        """–ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–∞ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏"""
        if not detections:
            return None

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        sample_size = min(3, len(detections))
        characteristics = []

        for detection in detections[:sample_size]:
            if 'bbox' in detection:
                char = self.bread_classifier.extract_characteristics(frame, detection['bbox'])
                characteristics.append(char)

        if not characteristics:
            return None

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É
        types = []
        for char in characteristics:
            bread_type = self.bread_classifier.classify_bread_type(char)
            types.append(bread_type)

        # –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π —Ç–∏–ø
        if types:
            most_common = max(set(types), key=types.count)
            self.type_history.append(most_common)

            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–¥—Ä–∞—Ö
            if len(self.type_history) >= 3:
                recent_types = list(self.type_history)[-3:]
                if recent_types.count(most_common) >= 2:
                    return most_common

        return None

    def _start_new_batch(self, batch_type: str, timestamp: float):
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏"""
        old_type = self.current_batch_type
        old_name = self.bread_classifier.get_bread_name(old_type or 'unknown')
        new_name = self.bread_classifier.get_bread_name(batch_type)

        self.current_batch_type = batch_type
        self.batch_start_time = timestamp
        self.waiting_for_new_batch = False

        self.logger.info(f"ü•ñ –°–ú–ï–ù–ê –ü–ê–†–¢–ò–ò: {old_name} ‚Üí {new_name}")

        return {
            'event': 'batch_changed',
            'old_type': old_type,
            'new_type': batch_type,
            'old_name': old_name,
            'new_name': new_name,
            'timestamp': timestamp
        }

    def get_current_batch_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –ø–∞—Ä—Ç–∏–∏"""
        duration = time.time() - self.batch_start_time if self.batch_start_time else 0

        return {
            'type': self.current_batch_type,
            'name': self.bread_classifier.get_bread_name(self.current_batch_type or 'unknown'),
            'start_time': self.batch_start_time,
            'duration': duration,
            'in_gap': self.in_gap,
            'waiting_for_new_batch': self.waiting_for_new_batch
        }

    def force_new_batch(self, batch_type: str = None):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –Ω–∞—á–∞–ª–æ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏"""
        timestamp = time.time()

        if batch_type:
            self._start_new_batch(batch_type, timestamp)
        else:
            # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            self.current_batch_type = None
            self.waiting_for_new_batch = True
            self.batch_start_time = timestamp

        self.logger.info(f"üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–º–µ–Ω–∞ –ø–∞—Ä—Ç–∏–∏: {batch_type or '–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ'}")

    def get_statistics(self) -> Dict[str, Any]:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        gap_ratio = sum(self.gap_detector.gap_history) / len(
            self.gap_detector.gap_history) if self.gap_detector.gap_history else 0

        return {
            'total_frames_processed': len(self.recent_detections),
            'gap_detection_ratio': gap_ratio,
            'current_batch_duration': time.time() - self.batch_start_time if self.batch_start_time else 0,
            'type_changes_detected': len(set(self.type_history)) if self.type_history else 0
        }