# install.py - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
import subprocess
import sys
import platform
import os


def run_command(cmd, description):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print(f"\nüîÑ {description}...")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {cmd}")

    try:
        result = subprocess.run(cmd, shell=True, check=True,
                                capture_output=True, text=True)
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞:")
        print(f"–ö–æ–¥ –æ—à–∏–±–∫–∏: {e.returncode}")
        print(f"–í—ã–≤–æ–¥: {e.stdout}")
        print(f"–û—à–∏–±–∫–∏: {e.stderr}")
        return False


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    version = sys.version_info
    print(f"üêç Python –≤–µ—Ä—Å–∏—è: {version.major}.{version.minor}.{version.micro}")

    if version.major != 3 or version.minor < 8:
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –Ω–æ–≤–µ–µ")
        return False

    if version.minor > 11:
        print("‚ö†Ô∏è  Python 3.12+ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏")

    return True


def detect_system():
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    system = platform.system().lower()
    print(f"üíª –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: {system}")

    is_windows = system == 'windows'

    if is_windows:
        print("‚ö†Ô∏è  Windows –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ - Coral TPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        print("   –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU –¥–µ—Ç–µ–∫—Ü–∏—è")

    return is_windows


def install_packages(is_windows=False):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ —á–∞—Å—Ç—è–º"""
    print("\nüì¶ –£–°–¢–ê–ù–û–í–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("=" * 50)

    # 1. –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    if not run_command(
            f"{sys.executable} -m pip install --upgrade pip setuptools wheel",
            "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ pip/setuptools/wheel"
    ):
        return False

    # 2. –ë–∞–∑–æ–≤—ã–µ –ø–∞–∫–µ—Ç—ã (—á–∞—Å—Ç–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ)
    basic_packages = [
        "numpy>=1.21.0,<1.25.0",
        "opencv-python>=4.7.0",
        "Pillow>=9.0.0"
    ]

    for package in basic_packages:
        if not run_command(
                f"{sys.executable} -m pip install '{package}'",
                f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}"
        ):
            print(f"‚ö†Ô∏è  –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É {package}...")
            # –ü—Ä–æ–±—É–µ–º –±–µ–∑ –∫–µ—à–∞
            if not run_command(
                    f"{sys.executable} -m pip install --no-cache-dir '{package}'",
                    f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package} (–±–µ–∑ –∫–µ—à–∞)"
            ):
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}")
                return False

    # 3. –í–µ–± –∏ –ë–î –ø–∞–∫–µ—Ç—ã
    web_packages = [
        "SQLAlchemy>=2.0.0",
        "Flask>=2.3.0",
        "Flask-CORS>=4.0.0",
        "requests>=2.28.0",
        "PyYAML>=6.0"
    ]

    for package in web_packages:
        if not run_command(
                f"{sys.executable} -m pip install '{package}'",
                f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}"
        ):
            return False

    # 4. –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    ml_packages = [
        "tensorflow-cpu>=2.12.0,<2.16.0" if is_windows else "tensorflow>=2.12.0,<2.16.0",
        "ultralytics>=8.0.0",
        "scikit-learn>=1.2.0",
        "matplotlib>=3.6.0"
    ]

    for package in ml_packages:
        if not run_command(
                f"{sys.executable} -m pip install '{package}'",
                f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}"
        ):
            print(f"‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º {package} - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã")

    # 5. Coral TPU (—Ç–æ–ª—å–∫–æ Linux)
    if not is_windows:
        coral_packages = ["pycoral", "tflite-runtime"]
        for package in coral_packages:
            if not run_command(
                    f"{sys.executable} -m pip install '{package}'",
                    f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ {package}"
            ):
                print(f"‚ö†Ô∏è  {package} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø–∞–∫–µ—Ç")

    return True


def test_installation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–°–¢–ê–ù–û–í–ö–ò")
    print("=" * 50)

    test_results = {}

    # –°–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    tests = [
        ("numpy", "import numpy as np; print(f'NumPy {np.__version__}')"),
        ("opencv", "import cv2; print(f'OpenCV {cv2.__version__}')"),
        ("flask", "import flask; print(f'Flask {flask.__version__}')"),
        ("sqlalchemy", "import sqlalchemy; print(f'SQLAlchemy {sqlalchemy.__version__}')"),
        ("yaml", "import yaml; print('PyYAML —Ä–∞–±–æ—Ç–∞–µ—Ç')"),
        ("requests", "import requests; print(f'Requests {requests.__version__}')"),
    ]

    optional_tests = [
        ("tensorflow", "import tensorflow as tf; print(f'TensorFlow {tf.__version__}')"),
        ("ultralytics", "from ultralytics import YOLO; print('YOLO —Ä–∞–±–æ—Ç–∞–µ—Ç')"),
        ("sklearn", "import sklearn; print(f'Scikit-learn {sklearn.__version__}')"),
        ("matplotlib", "import matplotlib; print(f'Matplotlib {matplotlib.__version__}')"),
    ]

    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã
    for name, test_code in tests:
        try:
            exec(test_code)
            test_results[name] = True
            print(f"‚úÖ {name}")
        except Exception as e:
            test_results[name] = False
            print(f"‚ùå {name}: {e}")

    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
    print("\nüìä –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:")
    for name, test_code in optional_tests:
        try:
            exec(test_code)
            test_results[name] = True
            print(f"‚úÖ {name}")
        except Exception as e:
            test_results[name] = False
            print(f"‚ö†Ô∏è  {name}: {e}")

    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–¥—Ä–∞
    try:
        import numpy as np
        frame = np.random.randint(0, 255, (480, 640, 3), dtype=np.uint8)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–∞–¥—Ä–∞: {frame.shape}")
        test_results['frame_creation'] = True
    except Exception as e:
        print(f"‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–¥—Ä–∞: {e}")
        test_results['frame_creation'] = False

    return test_results


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏"""
    print("ü•ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –°–ò–°–¢–ï–ú–´ –ü–û–î–°–ß–ï–¢–ê –•–õ–ï–ë–ê")
    print("=" * 60)

    # –ü—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    if not check_python_version():
        print("‚ùå –ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∞—è –≤–µ—Ä—Å–∏—è Python")
        return False

    is_windows = detect_system()

    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
    if not install_packages(is_windows):
        print("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤")
        return False

    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    test_results = test_installation()

    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\nüìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 50)

    essential_packages = ['numpy', 'opencv', 'flask', 'sqlalchemy', 'frame_creation']
    essential_ok = all(test_results.get(pkg, False) for pkg in essential_packages)

    if essential_ok:
        print("üéâ –ë–ê–ó–û–í–ê–Ø –£–°–¢–ê–ù–û–í–ö–ê –£–°–ü–ï–®–ù–ê!")
        print("\n‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ä–∞–±–æ—Ç–µ:")
        print("   python quick_test.py      - —Ç–µ—Å—Ç –∫–∞–º–µ—Ä")
        if is_windows:
            print("   python main_cpu_test.py   - –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã (CPU)")
        else:
            print("   python main_multicamera.py - –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã (TPU)")

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        optional_ok = sum(test_results.get(pkg, False)
                          for pkg in ['tensorflow', 'ultralytics', 'sklearn', 'matplotlib'])
        print(f"\nüìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {optional_ok}/4")

        if optional_ok < 2:
            print("‚ö†Ô∏è  –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å")
            print("   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: pip install tensorflow-cpu ultralytics")

    else:
        print("‚ùå –£–°–¢–ê–ù–û–í–ö–ê –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê")
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–≤—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏:")
        for pkg in essential_packages:
            if not test_results.get(pkg, False):
                print(f"   - {pkg}")

        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("   1. –û–±–Ω–æ–≤–∏—Ç–µ Python –¥–æ 3.9-3.10")
        print("   2. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤–æ–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
        print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ conda –≤–º–µ—Å—Ç–æ pip")

    return essential_ok


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)