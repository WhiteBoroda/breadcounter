# training_pipeline.py - –ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
import cv2
import os
import time
import json
import threading
from datetime import datetime
from config_loader import ConfigLoader


class DataCollector:
    """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∫–∞–º–µ—Ä –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"""

    def __init__(self, config_file='cameras.yaml', output_dir='training_data'):
        self.config = ConfigLoader(config_file)
        self.cameras = {cam.oven_id: cam for cam in self.config.get_cameras()}
        self.output_dir = output_dir
        self.connections = {}
        self.collecting = False

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫
        self.setup_directories()

    def setup_directories(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
        dirs = [
            f'{self.output_dir}/images',
            f'{self.output_dir}/annotations',
            f'{self.output_dir}/videos',
            f'{self.output_dir}/test_images',
            f'{self.output_dir}/markers'
        ]

        for dir_path in dirs:
            os.makedirs(dir_path, exist_ok=True)

        print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–∞–ø–æ–∫ –≤ {self.output_dir}")

    def connect_cameras(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º –∫–∞–º–µ—Ä–∞–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∫–∞–º–µ—Ä–∞–º...")

        connected_count = 0

        for oven_id, camera_config in self.cameras.items():
            rtsp_paths = [
                f"rtsp://{camera_config.login}:{camera_config.password}@{camera_config.camera_ip}/stream1",
                f"rtsp://{camera_config.login}:{camera_config.password}@{camera_config.camera_ip}/stream0",
                f"rtsp://{camera_config.login}:{camera_config.password}@{camera_config.camera_ip}/live"
            ]

            for rtsp_url in rtsp_paths:
                try:
                    cap = cv2.VideoCapture(rtsp_url)
                    cap.set(cv2.CAP_PROP_BUFFER_SIZE, 1)
                    cap.set(cv2.CAP_PROP_FPS, 15)

                    if cap.isOpened():
                        ret, frame = cap.read()
                        if ret:
                            self.connections[oven_id] = {
                                'capture': cap,
                                'config': camera_config,
                                'last_save': 0,
                                'frame_count': 0
                            }
                            print(f"‚úÖ {camera_config.oven_name}: –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
                            connected_count += 1
                            break
                    else:
                        cap.release()

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {camera_config.oven_name}: {e}")

        print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫–∞–º–µ—Ä: {connected_count}/{len(self.cameras)}")
        return connected_count > 0

    def collect_training_data(self, duration_minutes=20, save_interval=5):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not self.connections:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä")
            return

        print(f"üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–∞ {duration_minutes} –º–∏–Ω—É—Ç")
        print(f"üì∏ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ {save_interval} —Å–µ–∫—É–Ω–¥")
        print("   –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—á–∏ –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–±–æ—Ç–∞—é—Ç!")

        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")

        self.collecting = True
        start_time = time.time()
        end_time = start_time + (duration_minutes * 60)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞–º–µ—Ä—ã
        threads = []
        for oven_id in self.connections.keys():
            thread = threading.Thread(
                target=self._collect_from_camera,
                args=(oven_id, save_interval, end_time),
                daemon=True
            )
            threads.append(thread)
            thread.start()

        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        try:
            while time.time() < end_time and self.collecting:
                remaining = int((end_time - time.time()) / 60)
                print(f"‚è±Ô∏è  –û—Å—Ç–∞–ª–æ—Å—å {remaining} –º–∏–Ω—É—Ç... ({self._get_collection_stats()})")
                time.sleep(30)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

        except KeyboardInterrupt:
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö...")

        self.collecting = False

        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for thread in threads:
            thread.join()

        print("‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω")
        self._generate_collection_report()

    def _collect_from_camera(self, oven_id, save_interval, end_time):
        """–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞–º–µ—Ä—ã"""
        connection = self.connections[oven_id]
        cap = connection['capture']
        config = connection['config']

        while self.collecting and time.time() < end_time:
            ret, frame = cap.read()
            if ret:
                current_time = time.time()

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–¥—Ä —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if current_time - connection['last_save'] >= save_interval:
                    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')[:-3]
                    filename = f"oven_{oven_id}_{timestamp}.jpg"
                    filepath = os.path.join(self.output_dir, 'images', filename)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
                    cv2.imwrite(filepath, frame)

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                    self._save_frame_metadata(filename, oven_id, config, frame.shape)

                    connection['last_save'] = current_time
                    connection['frame_count'] += 1

                    print(f"üì∏ {config.oven_name}: —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–¥—Ä {connection['frame_count']}")

            time.sleep(0.1)

    def _save_frame_metadata(self, filename, oven_id, config, frame_shape):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–∞"""
        metadata = {
            'filename': filename,
            'oven_id': oven_id,
            'oven_name': config.oven_name,
            'camera_ip': config.camera_ip,
            'timestamp': datetime.now().isoformat(),
            'resolution': {
                'width': frame_shape[1],
                'height': frame_shape[0],
                'channels': frame_shape[2]
            },
            'workshop': config.workshop_name,
            'enterprise': config.enterprise_name
        }

        metadata_file = os.path.join(self.output_dir, 'images',
                                     filename.replace('.jpg', '_metadata.json'))

        with open(metadata_file, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, indent=2, ensure_ascii=False)

    def collect_marker_samples(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Å–±–æ—Ä –æ–±—Ä–∞–∑—Ü–æ–≤ –º–∞—Ä–∫–µ—Ä–æ–≤"""
        if not self.connections:
            print("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∫–∞–º–µ—Ä")
            return

        print("üéØ –†–ï–ñ–ò–ú –°–ë–û–†–ê –ú–ê–†–ö–ï–†–û–í")
        print("=" * 50)
        print("–†–∞–∑–º–µ—Å—Ç–∏—Ç–µ –º–∞—Ä–∫–µ—Ä—ã –ø–µ—Ä–µ–¥ –∫–∞–º–µ—Ä–∞–º–∏ –∏ –Ω–∞–∂–∏–º–∞–π—Ç–µ:")
        print("  [c] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ö–†–£–ì")
        print("  [s] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ö–í–ê–î–†–ê–¢")
        print("  [t] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¢–†–ï–£–ì–û–õ–¨–ù–ò–ö")
        print("  [d] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –†–û–ú–ë")
        print("  [w] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ó–í–ï–ó–î–£")
        print("  [q] - –≤—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –º–∞—Ä–∫–µ—Ä–æ–≤")
        print("=" * 50)

        marker_counts = {'circle': 0, 'square': 0, 'triangle': 0, 'diamond': 0, 'star': 0}
        target_per_marker = 20  # –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –∫–∞–∂–¥–æ–≥–æ –º–∞—Ä–∫–µ—Ä–∞

        while True:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–¥—Ä—ã —Å–æ –≤—Å–µ—Ö –∫–∞–º–µ—Ä
            display_frames = []

            for oven_id, connection in self.connections.items():
                ret, frame = connection['capture'].read()
                if ret:
                    config = connection['config']

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –∫–∞–¥—Ä
                    info_frame = frame.copy()
                    cv2.putText(info_frame, f"{config.oven_name}",
                                (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)

                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ä–∫–µ—Ä–æ–≤
                    y_offset = 60
                    for marker_type, count in marker_counts.items():
                        color = (0, 255, 0) if count >= target_per_marker else (0, 255, 255)
                        text = f"{marker_type}: {count}/{target_per_marker}"
                        cv2.putText(info_frame, text, (10, y_offset),
                                    cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)
                        y_offset += 25

                    display_frames.append((oven_id, info_frame))

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞–¥—Ä—ã
            for oven_id, frame in display_frames:
                cv2.imshow(f'Markers - Oven {oven_id}', frame)

            key = cv2.waitKey(1) & 0xFF

            if key == ord('c'):  # –ö—Ä—É–≥
                self._save_marker_sample('circle', marker_counts)
            elif key == ord('s'):  # –ö–≤–∞–¥—Ä–∞—Ç
                self._save_marker_sample('square', marker_counts)
            elif key == ord('t'):  # –¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫
                self._save_marker_sample('triangle', marker_counts)
            elif key == ord('d'):  # –†–æ–º–±
                self._save_marker_sample('diamond', marker_counts)
            elif key == ord('w'):  # –ó–≤–µ–∑–¥–∞
                self._save_marker_sample('star', marker_counts)
            elif key == ord('q'):  # –í—ã—Ö–æ–¥
                break

        cv2.destroyAllWindows()

        print(f"\nüéØ –°–æ–±—Ä–∞–Ω–æ –º–∞—Ä–∫–µ—Ä–æ–≤:")
        for marker_type, count in marker_counts.items():
            status = "‚úÖ" if count >= target_per_marker else "‚ö†Ô∏è"
            print(f"   {status} {marker_type}: {count}")

    def _save_marker_sample(self, marker_type, counts):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–∑—Ü–∞ –º–∞—Ä–∫–µ—Ä–∞"""
        saved_count = 0

        for oven_id, connection in self.connections.items():
            ret, frame = connection['capture'].read()
            if ret:
                config = connection['config']
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S_%f')[:-3]
                filename = f"marker_{marker_type}_oven{oven_id}_{timestamp}.jpg"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –º–∞—Ä–∫–µ—Ä–æ–≤
                filepath = os.path.join(self.output_dir, 'markers', filename)
                cv2.imwrite(filepath, frame)

                # –¢–∞–∫–∂–µ –∫–æ–ø–∏—Ä—É–µ–º –≤ –æ–±—â—É—é –ø–∞–ø–∫—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                main_filepath = os.path.join(self.output_dir, 'images', filename)
                cv2.imwrite(main_filepath, frame)

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                self._save_frame_metadata(filename, oven_id, config, frame.shape)

                saved_count += 1

        counts[marker_type] += saved_count
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤ {marker_type}: {saved_count}")

    def _get_collection_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–±–æ—Ä–∞"""
        total_frames = sum(conn['frame_count'] for conn in self.connections.values())
        return f"–∫–∞–¥—Ä–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: {total_frames}"

    def _generate_collection_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –æ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        images_dir = os.path.join(self.output_dir, 'images')
        image_files = [f for f in os.listdir(images_dir) if f.endswith('.jpg')]

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—á–∞–º
        oven_stats = {}
        marker_stats = {}

        for filename in image_files:
            if filename.startswith('oven_'):
                oven_id = filename.split('_')[1]
                oven_stats[oven_id] = oven_stats.get(oven_id, 0) + 1
            elif filename.startswith('marker_'):
                marker_type = filename.split('_')[1]
                marker_stats[marker_type] = marker_stats.get(marker_type, 0) + 1

        report = {
            'collection_date': datetime.now().isoformat(),
            'total_images': len(image_files),
            'images_per_oven': oven_stats,
            'marker_samples': marker_stats,
            'cameras_used': len(self.connections),
            'output_directory': self.output_dir
        }

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        report_path = os.path.join(self.output_dir, 'collection_report.json')
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)

        # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
        print("\nüìä –û–¢–ß–ï–¢ –û –°–ë–û–†–ï –î–ê–ù–ù–´–•")
        print("=" * 40)
        print(f"üñºÔ∏è  –í—Å–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {len(image_files)}")
        print(f"üìπ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∫–∞–º–µ—Ä: {len(self.connections)}")

        if oven_stats:
            print("\nüìà –ü–æ –ø–µ—á–∞–º:")
            for oven_id, count in oven_stats.items():
                print(f"   –ü–µ—á—å {oven_id}: {count} –∫–∞–¥—Ä–æ–≤")

        if marker_stats:
            print("\nüéØ –ú–∞—Ä–∫–µ—Ä—ã:")
            for marker_type, count in marker_stats.items():
                print(f"   {marker_type}: {count} –æ–±—Ä–∞–∑—Ü–æ–≤")

        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        print("=" * 40)

    def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        for connection in self.connections.values():
            if 'capture' in connection:
                connection['capture'].release()
        cv2.destroyAllWindows()


def run_training_pipeline():
    """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –ø–∞–π–ø–ª–∞–π–Ω–∞ –æ–±—É—á–µ–Ω–∏—è"""
    print("üöÄ –ü–ê–ô–ü–õ–ê–ô–ù –û–ë–£–ß–ï–ù–ò–Ø –ú–û–î–ï–õ–ò –î–ï–¢–ï–ö–¶–ò–ò –•–õ–ï–ë–ê")
    print("=" * 60)

    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        collector = DataCollector()

        if not collector.connect_cameras():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –∫–∞–º–µ—Ä–∞–º")
            print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ cameras.yaml")
            return

        print("\n1Ô∏è‚É£ –°–ë–û–† –û–ë–£–ß–ê–Æ–©–ò–• –î–ê–ù–ù–´–•")
        print("-" * 30)

        # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Å–±–æ—Ä–∞:")
        print("  [1] –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –∫–∞–¥—Ä–æ–≤")
        print("  [2] –°–±–æ—Ä –æ–±—Ä–∞–∑—Ü–æ–≤ –º–∞—Ä–∫–µ—Ä–æ–≤")
        print("  [3] –ò —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ")
        print("  [0] –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")

        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3): ").strip()

        if choice in ['1', '3']:
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä
            print("\nüé¨ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
            duration = input("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–±–æ—Ä–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15): ").strip()
            duration = int(duration) if duration.isdigit() else 15

            interval = input("–ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 3): ").strip()
            interval = int(interval) if interval.isdigit() else 3

            collector.collect_training_data(duration_minutes=duration, save_interval=interval)

        if choice in ['2', '3']:
            # –°–±–æ—Ä –º–∞—Ä–∫–µ—Ä–æ–≤
            print("\nüéØ –°–±–æ—Ä –æ–±—Ä–∞–∑—Ü–æ–≤ –º–∞—Ä–∫–µ—Ä–æ–≤")
            print("   –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –º–∞—Ä–∫–µ—Ä—ã: –∫—Ä—É–≥, –∫–≤–∞–¥—Ä–∞—Ç, —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫, —Ä–æ–º–±, –∑–≤–µ–∑–¥–∞")

            ready = input("–ú–∞—Ä–∫–µ—Ä—ã –≥–æ—Ç–æ–≤—ã? (y/n): ").strip().lower()
            if ready == 'y':
                collector.collect_marker_samples()

        print("\n2Ô∏è‚É£ –ê–ù–ù–û–¢–ê–¶–ò–Ø –î–ê–ù–ù–´–•")
        print("-" * 30)

        if choice != '0':
            annotate = input("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏? (y/n): ").strip().lower()
            if annotate == 'y':
                print("üè∑Ô∏è –ó–∞–ø—É—Å–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏...")
                print("   –û—Ç–∫—Ä–æ–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ä–∞–∑–º–µ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")

                from annotation_tool import AnnotationTool
                annotator = AnnotationTool('training_data/images', 'training_data/annotations')
                annotator.annotate_dataset()

        print("\n3Ô∏è‚É£ –û–ë–£–ß–ï–ù–ò–ï –ú–û–î–ï–õ–ò")
        print("-" * 30)

        train = input("–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏? (y/n): ").strip().lower()
        if train == 'y':
            print("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...")
            print("   –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 30-60 –º–∏–Ω—É—Ç")

            try:
                from model_trainer import BreadDetectionTrainer
                trainer = BreadDetectionTrainer('training_data')
                model, history = trainer.train_model(epochs=50)

                if model:
                    print("\n4Ô∏è‚É£ –ö–û–ù–í–ï–†–¢–ê–¶–ò–Ø –î–õ–Ø CORAL TPU")
                    print("-" * 30)

                    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ TF Lite
                    tflite_path = trainer.convert_to_tflite('bread_detector_final.h5')

                    if tflite_path:
                        # –ö–æ–º–ø–∏–ª—è—Ü–∏—è –¥–ª—è Edge TPU
                        edge_tpu_path = trainer.compile_for_edge_tpu(tflite_path)

                        if edge_tpu_path:
                            print(f"\nüéâ –û–ë–£–ß–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!")
                            print("=" * 50)
                            print(f"üß† –ú–æ–¥–µ–ª—å –¥–ª—è Coral TPU: {edge_tpu_path}")
                            print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: training_data/")
                            print("üìÑ –ö–æ–ø–∏—Ä—É–π—Ç–µ .tflite —Ñ–∞–π–ª –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å Coral TPU")
                            print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—É—é —Å–∏—Å—Ç–µ–º—É:")
                            print("   python main_multicamera.py cameras.yaml")

            except ImportError:
                print("‚ö†Ô∏è  –ú–æ–¥—É–ª—å –æ–±—É—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω")
                print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install tensorflow ultralytics")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è: {e}")

    except KeyboardInterrupt:
        print("\nüõë –ü–∞–π–ø–ª–∞–π–Ω –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ: {e}")
    finally:
        if 'collector' in locals():
            collector.cleanup()

    print("\n‚úÖ –ü–∞–π–ø–ª–∞–π–Ω –æ–±—É—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")


if __name__ == "__main__":
    run_training_pipeline()